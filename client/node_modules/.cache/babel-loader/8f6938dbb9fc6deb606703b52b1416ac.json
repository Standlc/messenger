{"ast":null,"code":"import { DateTime } from \"luxon\";\nexport const groupChatMessage = _ref => {\n  let {\n    messages,\n    i,\n    messageRef\n  } = _ref;\n  const message = messages[i];\n  const messageDate = message.createdAt;\n  const messageAbove = messages[i + 1];\n  const messageBelow = messages[i - 1];\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        year: \"2-digit\"\n      }),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        month: \"2-digit\"\n      }),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        day: \"2-digit\"\n      }),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        hour: \"2-digit\",\n        hourCycle: \"h23\"\n      })\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\";\n    return parseInt(table[isValidDateType ? dateType : \"year\"]);\n  };\n\n  const hasNeighborBelow = () => {\n    if (!messageBelow || messageBelow.userInfos._id !== message.userInfos._id) return false;\n    const messageBelowDate = messageBelow.createdAt;\n    if (time(messageDate, \"year\") < time(messageBelowDate, \"year\")) return;\n    if (time(messageDate, \"month\") < time(messageBelowDate, \"month\")) return;\n    if (time(messageDate, \"day\") < time(messageBelowDate, \"day\")) return;\n    return !(time(messageDate, \"hour\") < time(messageBelowDate, \"hour\"));\n  };\n\n  const hasNeighborAbove = () => {\n    if (!messageAbove || messageAbove.userInfos._id !== message.userInfos._id) return false;\n    const messageAboveDate = messageAbove.createdAt;\n    if (time(messageDate, \"year\") > time(messageAboveDate, \"year\")) return;\n    if (time(messageDate, \"month\") > time(messageAboveDate, \"month\")) return;\n    if (time(messageDate, \"day\") > time(messageAboveDate, \"day\")) return;\n    return !(time(messageDate, \"hour\") > time(messageAboveDate, \"hour\"));\n  }; //ASIGNING STYLES\n\n\n  if (hasNeighborAbove() && hasNeighborBelow()) {\n    const messageRefCurrent = messageRef.current;\n    if (!messageRefCurrent) return;\n    messageRefCurrent.style.backgroundColor = \"green\";\n  } else if (hasNeighborAbove() && !hasNeighborBelow()) {\n    const messageRefCurrent = messageRef.current;\n    if (!messageRefCurrent) return;\n    messageRefCurrent.style.backgroundColor = \"blue\";\n  } else if (!hasNeighborAbove() && hasNeighborBelow()) {\n    const messageRefCurrent = messageRef.current;\n    if (!messageRefCurrent) return;\n    messageRefCurrent.style.backgroundColor = \"red\";\n  } else {\n    const messageRefCurrent = messageRef.current;\n    if (!messageRefCurrent) return;\n    messageRefCurrent.style.backgroundColor = \"purple\";\n  }\n}; // console.log(\n//   message.userInfos.username,\n//   message.content,\n//   hasNeighborAbove(),\n//   hasNeighborBelow()\n// );\n// export const hasCloseNeighbor = ({\n//   order,\n//   messages,\n//   i,\n// }: {\n//   order: string;\n//   messages: Message[];\n//   i: number;\n// }) => {\n//   const neighborMessage = order === \"next\" ? messages[i - 1] : messages[i + 1];\n//   const isNeighborOwnMessage =\n//     neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n//   if (!neighborMessage || !isNeighborOwnMessage) return false;\n//   const neighborMessageDate = neighborMessage?.createdAt;\n//   const messageDate = messages[i].createdAt;\n//   const time = (messageCreatedAt: string, dateType: string) => {\n//     const table = {\n//       year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         year: \"2-digit\",\n//       }),\n//       month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         month: \"2-digit\",\n//       }),\n//       day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         day: \"2-digit\",\n//       }),\n//       hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         hour: \"2-digit\",\n//         hourCycle: \"h23\",\n//       }),\n//     };\n//     const isValidDateType =\n//       dateType === \"year\" ||\n//       dateType === \"month\" ||\n//       dateType === \"day\" ||\n//       dateType === \"hour\";\n//     return parseInt(table[isValidDateType ? dateType : \"year\"]);\n//   };\n//   if (order === \"next\") {\n//     if (time(messageDate, \"year\") < time(neighborMessageDate, \"year\")) return;\n//     if (time(messageDate, \"month\") < time(neighborMessageDate, \"month\")) return;\n//     if (time(messageDate, \"day\") < time(neighborMessageDate, \"day\")) return;\n//     return !(time(messageDate, \"hour\") < time(neighborMessageDate, \"hour\"));\n//   } else {\n//     if (time(messageDate, \"year\") > time(neighborMessageDate, \"year\")) return;\n//     if (time(messageDate, \"month\") > time(neighborMessageDate, \"month\")) return;\n//     if (time(messageDate, \"day\") > time(neighborMessageDate, \"day\")) return;\n//     return !(time(messageDate, \"hour\") > time(neighborMessageDate, \"hour\"));\n//   }\n// };","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/isMessageClose.tsx"],"names":["DateTime","groupChatMessage","messages","i","messageRef","message","messageDate","createdAt","messageAbove","messageBelow","time","messageCreatedAt","dateType","table","year","fromISO","toLocaleString","month","day","hour","hourCycle","isValidDateType","parseInt","hasNeighborBelow","userInfos","_id","messageBelowDate","hasNeighborAbove","messageAboveDate","messageRefCurrent","current","style","backgroundColor"],"mappings":"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","sourcesContent":["import { Message } from \"../../../../types\";\nimport { DateTime } from \"luxon\";\nimport { RefObject } from \"react\";\n\nexport const groupChatMessage = ({\n  messages,\n  i,\n  messageRef,\n}: {\n  messages: Message[];\n  i: number;\n  messageRef: RefObject<HTMLDivElement>;\n}) => {\n  const message = messages[i];\n  const messageDate = message.createdAt;\n  const messageAbove = messages[i + 1];\n  const messageBelow = messages[i - 1];\n\n  const time = (messageCreatedAt: string, dateType: string) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        year: \"2-digit\",\n      }),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        month: \"2-digit\",\n      }),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        day: \"2-digit\",\n      }),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        hour: \"2-digit\",\n        hourCycle: \"h23\",\n      }),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\";\n\n    return parseInt(table[isValidDateType ? dateType : \"year\"]);\n  };\n\n  const hasNeighborBelow = () => {\n    if (!messageBelow || messageBelow.userInfos._id !== message.userInfos._id)\n      return false;\n    const messageBelowDate = messageBelow.createdAt;\n\n    if (time(messageDate, \"year\") < time(messageBelowDate, \"year\")) return;\n\n    if (time(messageDate, \"month\") < time(messageBelowDate, \"month\")) return;\n\n    if (time(messageDate, \"day\") < time(messageBelowDate, \"day\")) return;\n\n    return !(time(messageDate, \"hour\") < time(messageBelowDate, \"hour\"));\n  };\n\n  const hasNeighborAbove = () => {\n    if (!messageAbove || messageAbove.userInfos._id !== message.userInfos._id)\n      return false;\n    const messageAboveDate = messageAbove.createdAt;\n\n    if (time(messageDate, \"year\") > time(messageAboveDate, \"year\")) return;\n\n    if (time(messageDate, \"month\") > time(messageAboveDate, \"month\")) return;\n\n    if (time(messageDate, \"day\") > time(messageAboveDate, \"day\")) return;\n\n    return !(time(messageDate, \"hour\") > time(messageAboveDate, \"hour\"));\n  };\n\n  //ASIGNING STYLES\n  if (hasNeighborAbove() && hasNeighborBelow()) {\n    const messageRefCurrent = messageRef.current;\n    if (!messageRefCurrent) return;\n    messageRefCurrent.style.backgroundColor = \"green\";\n  } else if (hasNeighborAbove() && !hasNeighborBelow()) {\n    const messageRefCurrent = messageRef.current;\n    if (!messageRefCurrent) return;\n    messageRefCurrent.style.backgroundColor = \"blue\";\n  } else if (!hasNeighborAbove() && hasNeighborBelow()) {\n    const messageRefCurrent = messageRef.current;\n    if (!messageRefCurrent) return;\n    messageRefCurrent.style.backgroundColor = \"red\";\n  } else {\n    const messageRefCurrent = messageRef.current;\n    if (!messageRefCurrent) return;\n    messageRefCurrent.style.backgroundColor = \"purple\";\n  }\n};\n\n// console.log(\n//   message.userInfos.username,\n//   message.content,\n//   hasNeighborAbove(),\n//   hasNeighborBelow()\n// );\n// export const hasCloseNeighbor = ({\n//   order,\n//   messages,\n//   i,\n// }: {\n//   order: string;\n//   messages: Message[];\n//   i: number;\n// }) => {\n//   const neighborMessage = order === \"next\" ? messages[i - 1] : messages[i + 1];\n//   const isNeighborOwnMessage =\n//     neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n//   if (!neighborMessage || !isNeighborOwnMessage) return false;\n//   const neighborMessageDate = neighborMessage?.createdAt;\n//   const messageDate = messages[i].createdAt;\n\n//   const time = (messageCreatedAt: string, dateType: string) => {\n//     const table = {\n//       year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         year: \"2-digit\",\n//       }),\n//       month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         month: \"2-digit\",\n//       }),\n//       day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         day: \"2-digit\",\n//       }),\n//       hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         hour: \"2-digit\",\n//         hourCycle: \"h23\",\n//       }),\n//     };\n//     const isValidDateType =\n//       dateType === \"year\" ||\n//       dateType === \"month\" ||\n//       dateType === \"day\" ||\n//       dateType === \"hour\";\n\n//     return parseInt(table[isValidDateType ? dateType : \"year\"]);\n//   };\n\n//   if (order === \"next\") {\n//     if (time(messageDate, \"year\") < time(neighborMessageDate, \"year\")) return;\n\n//     if (time(messageDate, \"month\") < time(neighborMessageDate, \"month\")) return;\n\n//     if (time(messageDate, \"day\") < time(neighborMessageDate, \"day\")) return;\n\n//     return !(time(messageDate, \"hour\") < time(neighborMessageDate, \"hour\"));\n//   } else {\n//     if (time(messageDate, \"year\") > time(neighborMessageDate, \"year\")) return;\n\n//     if (time(messageDate, \"month\") > time(neighborMessageDate, \"month\")) return;\n\n//     if (time(messageDate, \"day\") > time(neighborMessageDate, \"day\")) return;\n\n//     return !(time(messageDate, \"hour\") > time(neighborMessageDate, \"hour\"));\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}