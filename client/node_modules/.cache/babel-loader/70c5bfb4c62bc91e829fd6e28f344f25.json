{"ast":null,"code":"var _jsxFileName = \"/Users/stan/messenger/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\"; // import moment from \"moment\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [user, setUser] = useState();\n  console.log(user);\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []); // useEffect(() => {\n  //   localStorage.setItem(\n  //     \"user\",\n  //     JSON.stringify({\n  //       _id: \"6214bf8be824cba2c81db0dd\",\n  //       username: \"first\",\n  //       email: \"firstEmail\",\n  //       password:\n  //         \"$2b$10$GSh2pLpCmxsg/cAWhScVA.dbKMSBLxMK.viZqiqBZNunJebqkx50m\",\n  //       createdAt: \"2022-02-22T10:45:10.155+00:00\",\n  //       updatedAt: \"2022-02-22T10:45:10.155+00:00\",\n  //       __v: 0,\n  //     })\n  //   );\n  // }, []);\n\n  const [messages, setMessages] = useState([]);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(`http://localhost:5050/api/conversations/${user === null || user === void 0 ? void 0 : user._id}`);\n      setConversations(res.data);\n    };\n\n    getConversations();\n  }, [user]);\n  useEffect(() => {\n    const getMessages = async () => {\n      const res = await axios.get(`http://localhost:5050/api/messages/${selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id}`);\n      setMessages(res.data);\n    };\n\n    getMessages();\n  }, [selectedConversation]);\n  const [message, setMessage] = useState(\"\");\n\n  const sendMessage = async () => {\n    if (message === \"\" || !selectedConversation || !user) return;\n    const res = await axios.post(`http://localhost:5050/api/messages/${selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id}`, {\n      content: message,\n      userID: user._id,\n      conversationID: selectedConversation._id\n    }); // setMessages([\n    //   ...messages,\n    //   {\n    //     _id: (Math.random() * 10000).toString(),\n    //     content: message,\n    //     userInfos: user,\n    //     conversationID: selectedConversation._id,\n    //     createdAt: new Date(),\n    //     updatedAt: new Date(),\n    //     __v: 0,\n    //   },\n    // ]);\n\n    const receiversIds = selectedConversation.membersInfos.map(member => member._id !== user._id);\n    const {\n      userID,\n      ...others\n    } = res.data;\n    const messageCopy = { ...others,\n      userInfos: user\n    };\n    socket.emit(\"message\", messageCopy, [\"6214beb6e824cba2c81db0da\"]);\n    setMessage(\"\");\n  }; //WEB SOCKET\n  // const [users, setUsers] = useState<any>([]);\n  // console.log(users);\n\n\n  const socket = io(\"ws://localhost:8080\" // {transports: [\"websocket\", \"polling\"],}\n  );\n  useEffect(() => {\n    // socket.on(\"getUsers\", (user: any) => {\n    //   const newUser = {\n    //     _id: user,\n    //     username: \"first\",\n    //     email: \"firstEmail\",\n    //     password: \"$2b$10$GSh2pLpCmxsg/cAWhScVA.dbKMSBLxMK.viZqiqBZNunJebqkx50m\",\n    //     createdAt: \"2022-02-22T10:45:10.155+00:00\",\n    //     updatedAt: \"2022-02-22T10:45:10.155+00:00\",\n    //     __v: 0,\n    //   }\n    //   setUsers(users);\n    // });\n    socket.on(\"getMessage\", message => {\n      console.log(\"new message\"); // console.log([...messages]);\n\n      console.log(message);\n      setMessages([...messages, message]);\n    });\n  }, []);\n  useEffect(() => {\n    socket.emit(\"connexion\", user === null || user === void 0 ? void 0 : user._id);\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginRight: \"100px\"\n      },\n      children: conversations.map(conversation => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: conversation.membersInfos.map(member => {\n            if (member._id !== (user === null || user === void 0 ? void 0 : user._id)) return /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => setSelectedConversation(conversation),\n              children: member.username\n            }, member._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 21\n            }, this);\n          })\n        }, conversation._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [messages.map(message => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: message.userInfos._id === (user === null || user === void 0 ? void 0 : user._id) ? {\n            backgroundColor: \"green\"\n          } : {\n            backgroundColor: \"blue\"\n          },\n          children: message.content\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"your message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"qzfaMOGouUA4W3RBwlajQtZeHE8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/messenger/src/App.tsx"],"names":["axios","React","useEffect","useState","io","App","user","setUser","console","log","userJson","localStorage","getItem","JSON","parse","messages","setMessages","conversations","setConversations","selectedConversation","setSelectedConversation","getConversations","res","get","_id","data","getMessages","message","setMessage","sendMessage","post","content","userID","conversationID","receiversIds","membersInfos","map","member","others","messageCopy","userInfos","socket","emit","on","display","marginRight","conversation","username","backgroundColor","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;;;AAWA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,EAAhC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAjB;AACAF,IAAAA,QAAQ,IAAIH,OAAO,CAACM,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAD,CAAnB;AACD,GAHQ,EAGN,EAHM,CAAT,CAHgB,CAOhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAUtC,EAVsC,CAAxC;AAYA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAQhD,EARgD,CAAlD;AAUA,QAAM,CAACgB,oBAAD,EAAuBC,uBAAvB,IAAkDjB,QAAQ,EAAhE;AAQAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,gBAAgB,GAAG,YAAY;AACnC,YAAMC,GAAG,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CACf,2CAA0CjB,IAA3C,aAA2CA,IAA3C,uBAA2CA,IAAI,CAAEkB,GAAI,EADrC,CAAlB;AAGAN,MAAAA,gBAAgB,CAACI,GAAG,CAACG,IAAL,CAAhB;AACD,KALD;;AAMAJ,IAAAA,gBAAgB;AACjB,GARQ,EAQN,CAACf,IAAD,CARM,CAAT;AAUAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,WAAW,GAAG,YAAY;AAC9B,YAAMJ,GAAG,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CACf,sCAAqCJ,oBAAtC,aAAsCA,oBAAtC,uBAAsCA,oBAAoB,CAAEK,GAAI,EADhD,CAAlB;AAGAR,MAAAA,WAAW,CAACM,GAAG,CAACG,IAAL,CAAX;AACD,KALD;;AAMAC,IAAAA,WAAW;AACZ,GARQ,EAQN,CAACP,oBAAD,CARM,CAAT;AAUA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAS,EAAT,CAAtC;;AAEA,QAAM0B,WAAW,GAAG,YAAY;AAC9B,QAAIF,OAAO,KAAK,EAAZ,IAAkB,CAACR,oBAAnB,IAA2C,CAACb,IAAhD,EAAsD;AACtD,UAAMgB,GAAG,GAAG,MAAMtB,KAAK,CAAC8B,IAAN,CACf,sCAAqCX,oBAAtC,aAAsCA,oBAAtC,uBAAsCA,oBAAoB,CAAEK,GAAI,EADhD,EAEhB;AACEO,MAAAA,OAAO,EAAEJ,OADX;AAEEK,MAAAA,MAAM,EAAE1B,IAAI,CAACkB,GAFf;AAGES,MAAAA,cAAc,EAAEd,oBAAoB,CAACK;AAHvC,KAFgB,CAAlB,CAF8B,CAU9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMU,YAAY,GAAGf,oBAAoB,CAACgB,YAArB,CAAkCC,GAAlC,CAClBC,MAAD,IAAYA,MAAM,CAACb,GAAP,KAAelB,IAAI,CAACkB,GADb,CAArB;AAGA,UAAM;AAAEQ,MAAAA,MAAF;AAAU,SAAGM;AAAb,QAAwBhB,GAAG,CAACG,IAAlC;AACA,UAAMc,WAAW,GAAG,EAClB,GAAGD,MADe;AAElBE,MAAAA,SAAS,EAAElC;AAFO,KAApB;AAIAmC,IAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ,EAAuBH,WAAvB,EAAoC,CAAC,0BAAD,CAApC;AACAX,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAhCD,CA3EgB,CA6GhB;AAEA;AAEA;;;AACA,QAAMa,MAAM,GAAGrC,EAAE,CACf,qBADe,CAEf;AAFe,GAAjB;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAuC,IAAAA,MAAM,CAACE,EAAP,CAAU,YAAV,EAAyBhB,OAAD,IAAa;AACnCnB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADmC,CAEnC;;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYkB,OAAZ;AACAX,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcY,OAAd,CAAD,CAAX;AACD,KALD;AAMD,GAnBQ,EAmBN,EAnBM,CAAT;AAqBAzB,EAAAA,SAAS,CAAC,MAAM;AACduC,IAAAA,MAAM,CAACC,IAAP,CAAY,WAAZ,EAAyBpC,IAAzB,aAAyBA,IAAzB,uBAAyBA,IAAI,CAAEkB,GAA/B;AACD,GAFQ,EAEN,CAAClB,IAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEsC,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA,4BACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAAZ;AAAA,gBACG5B,aAAa,CAACmB,GAAd,CAAmBU,YAAD,IAAkB;AACnC,4BACE;AAAA,oBACGA,YAAY,CAACX,YAAb,CAA0BC,GAA1B,CAA+BC,MAAD,IAAY;AACzC,gBAAIA,MAAM,CAACb,GAAP,MAAelB,IAAf,aAAeA,IAAf,uBAAeA,IAAI,CAAEkB,GAArB,CAAJ,EACE,oBACE;AACE,cAAA,OAAO,EAAE,MAAMJ,uBAAuB,CAAC0B,YAAD,CADxC;AAAA,wBAIGT,MAAM,CAACU;AAJV,eAEOV,MAAM,CAACb,GAFd;AAAA;AAAA;AAAA;AAAA,oBADF;AAQH,WAVA;AADH,WAAUsB,YAAY,CAACtB,GAAvB;AAAA;AAAA;AAAA;AAAA,gBADF;AAeD,OAhBA;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAoBE;AAAA,iBACGT,QAAQ,CAACqB,GAAT,CAAcT,OAAD,IAAa;AACzB,4BACE;AAEE,UAAA,KAAK,EACHA,OAAO,CAACa,SAAR,CAAkBhB,GAAlB,MAA0BlB,IAA1B,aAA0BA,IAA1B,uBAA0BA,IAAI,CAAEkB,GAAhC,IACI;AAAEwB,YAAAA,eAAe,EAAE;AAAnB,WADJ,GAEI;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WALR;AAAA,oBAQGrB,OAAO,CAACI;AARX,WACOJ,OAAO,CAACH,GADf;AAAA;AAAA;AAAA;AAAA,gBADF;AAYD,OAbA,CADH,eAeE;AACE,QAAA,KAAK,EAAEG,OADT;AAEE,QAAA,QAAQ,EAAGsB,CAAD,IAAOrB,UAAU,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAF7B;AAGE,QAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,cAfF,eAoBE;AAAQ,QAAA,OAAO,EAAEtB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD,CA5LD;;GAAMxB,G;;KAAAA,G;AA8LN,eAAeA,GAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\n// import moment from \"moment\";\n\ntype User = {\n  _id: \"\";\n  username: \"\";\n  email: \"\";\n  createdAt: Date;\n  updatedAt: Date;\n  __v: 0;\n};\n\nconst App = () => {\n  const [user, setUser] = useState<User>();\n  console.log(user);\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []);\n  // useEffect(() => {\n  //   localStorage.setItem(\n  //     \"user\",\n  //     JSON.stringify({\n  //       _id: \"6214bf8be824cba2c81db0dd\",\n  //       username: \"first\",\n  //       email: \"firstEmail\",\n  //       password:\n  //         \"$2b$10$GSh2pLpCmxsg/cAWhScVA.dbKMSBLxMK.viZqiqBZNunJebqkx50m\",\n  //       createdAt: \"2022-02-22T10:45:10.155+00:00\",\n  //       updatedAt: \"2022-02-22T10:45:10.155+00:00\",\n  //       __v: 0,\n  //     })\n  //   );\n  // }, []);\n\n  const [messages, setMessages] = useState<\n    {\n      _id: string;\n      content: string;\n      userInfos: User;\n      conversationID: string;\n      createdAt: Date;\n      updatedAt: Date;\n      __v: number;\n    }[]\n  >([]);\n\n  const [conversations, setConversations] = useState<\n    {\n      _id: string;\n      createdAt: Date;\n      updatedAt: Date;\n      __v: number;\n      membersInfos: User[];\n    }[]\n  >([]);\n\n  const [selectedConversation, setSelectedConversation] = useState<{\n    _id: string;\n    createdAt: Date;\n    updatedAt: Date;\n    __v: number;\n    membersInfos: User[];\n  }>();\n\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/conversations/${user?._id}`\n      );\n      setConversations(res.data);\n    };\n    getConversations();\n  }, [user]);\n\n  useEffect(() => {\n    const getMessages = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/messages/${selectedConversation?._id}`\n      );\n      setMessages(res.data);\n    };\n    getMessages();\n  }, [selectedConversation]);\n\n  const [message, setMessage] = useState<string>(\"\");\n\n  const sendMessage = async () => {\n    if (message === \"\" || !selectedConversation || !user) return;\n    const res = await axios.post(\n      `http://localhost:5050/api/messages/${selectedConversation?._id}`,\n      {\n        content: message,\n        userID: user._id,\n        conversationID: selectedConversation._id,\n      }\n    );\n    // setMessages([\n    //   ...messages,\n    //   {\n    //     _id: (Math.random() * 10000).toString(),\n    //     content: message,\n    //     userInfos: user,\n    //     conversationID: selectedConversation._id,\n    //     createdAt: new Date(),\n    //     updatedAt: new Date(),\n    //     __v: 0,\n    //   },\n    // ]);\n    const receiversIds = selectedConversation.membersInfos.map(\n      (member) => member._id !== user._id\n    );\n    const { userID, ...others } = res.data;\n    const messageCopy = {\n      ...others,\n      userInfos: user,\n    };\n    socket.emit(\"message\", messageCopy, [\"6214beb6e824cba2c81db0da\"]);\n    setMessage(\"\");\n  };\n\n  //WEB SOCKET\n\n  // const [users, setUsers] = useState<any>([]);\n\n  // console.log(users);\n  const socket = io(\n    \"ws://localhost:8080\"\n    // {transports: [\"websocket\", \"polling\"],}\n  );\n  useEffect(() => {\n    // socket.on(\"getUsers\", (user: any) => {\n    //   const newUser = {\n    //     _id: user,\n    //     username: \"first\",\n    //     email: \"firstEmail\",\n    //     password: \"$2b$10$GSh2pLpCmxsg/cAWhScVA.dbKMSBLxMK.viZqiqBZNunJebqkx50m\",\n    //     createdAt: \"2022-02-22T10:45:10.155+00:00\",\n    //     updatedAt: \"2022-02-22T10:45:10.155+00:00\",\n    //     __v: 0,\n    //   }\n    //   setUsers(users);\n    // });\n    socket.on(\"getMessage\", (message) => {\n      console.log(\"new message\");\n      // console.log([...messages]);\n      console.log(message);\n      setMessages([...messages, message]);\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.emit(\"connexion\", user?._id);\n  }, [user]);\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div style={{ marginRight: \"100px\" }}>\n        {conversations.map((conversation) => {\n          return (\n            <div key={conversation._id}>\n              {conversation.membersInfos.map((member) => {\n                if (member._id !== user?._id)\n                  return (\n                    <div\n                      onClick={() => setSelectedConversation(conversation)}\n                      key={member._id}\n                    >\n                      {member.username}\n                    </div>\n                  );\n              })}\n            </div>\n          );\n        })}\n      </div>\n      <div>\n        {messages.map((message) => {\n          return (\n            <div\n              key={message._id}\n              style={\n                message.userInfos._id === user?._id\n                  ? { backgroundColor: \"green\" }\n                  : { backgroundColor: \"blue\" }\n              }\n            >\n              {message.content}\n            </div>\n          );\n        })}\n        <input\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"your message\"\n        ></input>\n        <button onClick={sendMessage}>SEND</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}