{"ast":null,"code":"import { DateTime } from \"luxon\";\nexport const hasNeighborAbove = _ref => {\n  let {\n    messages,\n    i\n  } = _ref;\n  //THE LIST OF MESSAGES IS INVERTED TO DISPLAY LAST MESSAGE ON PAGE LOAD\n  const messageAbove = messages[i + 1];\n  if (!messageAbove) return false;\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        year: \"2-digit\"\n      }),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        month: \"2-digit\"\n      }),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        day: \"2-digit\"\n      }),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        hour: \"2-digit\",\n        hourCycle: \"h23\"\n      })\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\";\n    return parseInt(table[isValidDateType ? dateType : \"year\"]);\n  };\n\n  if (time(messages[i].createdAt, \"year\") > time(messageAbove.createdAt, \"year\")) return;\n  if (time(messages[i].createdAt, \"month\") > time(messageAbove.createdAt, \"month\")) return;\n  if (time(messages[i].createdAt, \"day\") > time(messageAbove.createdAt, \"day\")) return;\n  return !(time(messages[i].createdAt, \"hour\") > time(messageAbove.createdAt, \"hour\"));\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/chatTime/hasNeighborAbove.tsx"],"names":["DateTime","hasNeighborAbove","messages","i","messageAbove","time","messageCreatedAt","dateType","table","year","fromISO","toLocaleString","month","day","hour","hourCycle","isValidDateType","parseInt","createdAt"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAGA,OAAO,MAAMC,gBAAgB,GAAG,QAM1B;AAAA,MAN2B;AAC/BC,IAAAA,QAD+B;AAE/BC,IAAAA;AAF+B,GAM3B;AACJ;AACA,QAAMC,YAAY,GAAGF,QAAQ,CAACC,CAAC,GAAG,CAAL,CAA7B;AACA,MAAI,CAACC,YAAL,EAAmB,OAAO,KAAP;;AAEnB,QAAMC,IAAI,GAAG,CAACC,gBAAD,EAA2BC,QAA3B,KAAgD;AAC3D,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAET,QAAQ,CAACU,OAAT,CAAiBJ,gBAAjB,EAAmCK,cAAnC,CAAkD;AACtDF,QAAAA,IAAI,EAAE;AADgD,OAAlD,CADM;AAIZG,MAAAA,KAAK,EAAEZ,QAAQ,CAACU,OAAT,CAAiBJ,gBAAjB,EAAmCK,cAAnC,CAAkD;AACvDC,QAAAA,KAAK,EAAE;AADgD,OAAlD,CAJK;AAOZC,MAAAA,GAAG,EAAEb,QAAQ,CAACU,OAAT,CAAiBJ,gBAAjB,EAAmCK,cAAnC,CAAkD;AACrDE,QAAAA,GAAG,EAAE;AADgD,OAAlD,CAPO;AAUZC,MAAAA,IAAI,EAAEd,QAAQ,CAACU,OAAT,CAAiBJ,gBAAjB,EAAmCK,cAAnC,CAAkD;AACtDG,QAAAA,IAAI,EAAE,SADgD;AAEtDC,QAAAA,SAAS,EAAE;AAF2C,OAAlD;AAVM,KAAd;AAeA,UAAMC,eAAe,GACnBT,QAAQ,KAAK,MAAb,IACAA,QAAQ,KAAK,OADb,IAEAA,QAAQ,KAAK,KAFb,IAGAA,QAAQ,KAAK,MAJf;AAMA,WAAOU,QAAQ,CAACT,KAAK,CAACQ,eAAe,GAAGT,QAAH,GAAc,MAA9B,CAAN,CAAf;AACD,GAvBD;;AAyBA,MACEF,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYe,SAAb,EAAwB,MAAxB,CAAJ,GAAsCb,IAAI,CAACD,YAAY,CAACc,SAAd,EAAyB,MAAzB,CAD5C,EAGE;AACF,MACEb,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYe,SAAb,EAAwB,OAAxB,CAAJ,GAAuCb,IAAI,CAACD,YAAY,CAACc,SAAd,EAAyB,OAAzB,CAD7C,EAGE;AACF,MAAIb,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYe,SAAb,EAAwB,KAAxB,CAAJ,GAAqCb,IAAI,CAACD,YAAY,CAACc,SAAd,EAAyB,KAAzB,CAA7C,EACE;AACF,SAAO,EACLb,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYe,SAAb,EAAwB,MAAxB,CAAJ,GAAsCb,IAAI,CAACD,YAAY,CAACc,SAAd,EAAyB,MAAzB,CADrC,CAAP;AAGD,CAjDM","sourcesContent":["import { DateTime } from \"luxon\";\nimport { Message } from \"../../../../../types\";\n\nexport const hasNeighborAbove = ({\n  messages,\n  i,\n}: {\n  messages: Message[];\n  i: number;\n}) => {\n  //THE LIST OF MESSAGES IS INVERTED TO DISPLAY LAST MESSAGE ON PAGE LOAD\n  const messageAbove = messages[i + 1];\n  if (!messageAbove) return false;\n\n  const time = (messageCreatedAt: string, dateType: string) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        year: \"2-digit\",\n      }),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        month: \"2-digit\",\n      }),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        day: \"2-digit\",\n      }),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        hour: \"2-digit\",\n        hourCycle: \"h23\",\n      }),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\";\n\n    return parseInt(table[isValidDateType ? dateType : \"year\"]);\n  };\n\n  if (\n    time(messages[i].createdAt, \"year\") > time(messageAbove.createdAt, \"year\")\n  )\n    return;\n  if (\n    time(messages[i].createdAt, \"month\") > time(messageAbove.createdAt, \"month\")\n  )\n    return;\n  if (time(messages[i].createdAt, \"day\") > time(messageAbove.createdAt, \"day\"))\n    return;\n  return !(\n    time(messages[i].createdAt, \"hour\") > time(messageAbove.createdAt, \"hour\")\n  );\n};\n"]},"metadata":{},"sourceType":"module"}