{"ast":null,"code":"var _jsxFileName = \"/Users/stan/messenger/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\"; // import moment from \"moment\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // const submit = (e: any) => {\n  //   e.preventDefault();\n  //   socket.emit(\"send\", message);\n  //   setMessage(\"\");\n  // };\n  const user = {\n    _id: \"6214beb6e824cba2c81db0da\",\n    username: \"first\",\n    email: \"firstEmail\",\n    password: \"$2b$10$GSh2pLpCmxsg/cAWhScVA.dbKMSBLxMK.viZqiqBZNunJebqkx50m\",\n    createdAt: \"2022-02-22T10:45:10.155+00:00\",\n    updatedAt: \"2022-02-22T10:45:10.155+00:00\",\n    __v: 0\n  };\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(user));\n  }, []);\n  const [messages, setMessages] = useState([]);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(`http://localhost:5050/api/conversations/${user._id}`);\n      setConversations(res.data);\n    };\n\n    getConversations();\n  }, []);\n  useEffect(() => {\n    const getMessages = async () => {\n      const res = await axios.get(`http://localhost:5050/api/messages/${selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id}`);\n      setMessages(res.data);\n    };\n\n    getMessages();\n  }, [selectedConversation]);\n  const [message, setMessage] = useState(\"\");\n\n  const sendMessage = async () => {\n    if (message === \"\" || !selectedConversation) return;\n    const res = await axios.post(`http://localhost:5050/api/messages/${selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id}`, {\n      content: message,\n      userID: user._id,\n      conversationID: selectedConversation._id\n    });\n    setMessages([...messages, {\n      _id: \"1123456\",\n      content: message,\n      userID: user._id,\n      conversationID: selectedConversation._id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      __v: 0\n    }]);\n    setMessage(\"\");\n    socket.emit(\"message\", res.data);\n  }; //WEB SOCKET\n\n\n  const socket = io(\"http://localhost:8080\", {\n    transports: [\"websocket\", \"polling\"]\n  });\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    socket.emit(\"connexion\", user);\n    console.log(\"first\");\n  }, []);\n  console.log(users);\n  useEffect(() => {\n    // socket.on(\"connect\", () => {\n    //   socket.emit(\"username\", user.username);\n    // });\n    socket.on(\"connexion\", users => {\n      setUsers(users);\n    });\n    socket.on(\"message\", message => {\n      setMessages([...messages, message]);\n    }); // socket.on(\"disconnected\", (id) => {\n    //   setUsers((users: any) => {\n    //     return users.filter((user: any) => user.id !== id);\n    //   });\n    // });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginRight: \"100px\"\n      },\n      children: conversations.map(conversation => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: conversation.membersInfos.map(member => {\n            if (member._id !== user._id) return /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => setSelectedConversation(conversation),\n              children: member.username\n            }, member._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 21\n            }, this);\n          })\n        }, conversation._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [messages.map(message => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: message.content\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"your message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"QSYFdpuQrbEd111rC977/hvXS88=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/messenger/src/App.tsx"],"names":["axios","React","useEffect","useState","io","App","user","_id","username","email","password","createdAt","updatedAt","__v","localStorage","setItem","JSON","stringify","messages","setMessages","conversations","setConversations","selectedConversation","setSelectedConversation","getConversations","res","get","data","getMessages","message","setMessage","sendMessage","post","content","userID","conversationID","Date","socket","emit","transports","users","setUsers","console","log","on","display","marginRight","map","conversation","membersInfos","member","e","target","value"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\n\nimport io from \"socket.io-client\";\n// import moment from \"moment\";\n\nconst App = () => {\n  // const submit = (e: any) => {\n  //   e.preventDefault();\n  //   socket.emit(\"send\", message);\n  //   setMessage(\"\");\n  // };\n\n  const user = {\n    _id: \"6214beb6e824cba2c81db0da\",\n    username: \"first\",\n    email: \"firstEmail\",\n    password: \"$2b$10$GSh2pLpCmxsg/cAWhScVA.dbKMSBLxMK.viZqiqBZNunJebqkx50m\",\n    createdAt: \"2022-02-22T10:45:10.155+00:00\",\n    updatedAt: \"2022-02-22T10:45:10.155+00:00\",\n    __v: 0,\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(user));\n  }, []);\n\n  const [messages, setMessages] = useState<\n    {\n      _id: string;\n      content: string;\n      userID: string;\n      conversationID: string;\n      createdAt: Date;\n      updatedAt: Date;\n      __v: number;\n    }[]\n  >([]);\n\n  const [conversations, setConversations] = useState<\n    {\n      _id: string;\n      createdAt: Date;\n      updatedAt: Date;\n      __v: number;\n      membersInfos: {\n        _id: string;\n        username: string;\n        email: string;\n        createdAt: Date;\n        updatedAt: Date;\n        __v: number;\n      }[];\n    }[]\n  >([]);\n\n  const [selectedConversation, setSelectedConversation] = useState<{\n    _id: string;\n    createdAt: Date;\n    updatedAt: Date;\n    __v: number;\n    membersInfos: {\n      _id: string;\n      username: string;\n      email: string;\n      createdAt: Date;\n      updatedAt: Date;\n      __v: number;\n    }[];\n  }>();\n\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/conversations/${user._id}`\n      );\n      setConversations(res.data);\n    };\n    getConversations();\n  }, []);\n\n  useEffect(() => {\n    const getMessages = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/messages/${selectedConversation?._id}`\n      );\n      setMessages(res.data);\n    };\n    getMessages();\n  }, [selectedConversation]);\n\n  const [message, setMessage] = useState<string>(\"\");\n\n  const sendMessage = async () => {\n    if (message === \"\" || !selectedConversation) return;\n    const res = await axios.post(\n      `http://localhost:5050/api/messages/${selectedConversation?._id}`,\n      {\n        content: message,\n        userID: user._id,\n        conversationID: selectedConversation._id,\n      }\n    );\n    setMessages([\n      ...messages,\n      {\n        _id: \"1123456\",\n        content: message,\n        userID: user._id,\n        conversationID: selectedConversation._id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        __v: 0,\n      },\n    ]);\n    setMessage(\"\");\n    socket.emit(\"message\", res.data);\n  };\n\n  //WEB SOCKET\n  const socket = io(\"http://localhost:8080\", {\n    transports: [\"websocket\", \"polling\"],\n  });\n  const [users, setUsers] = useState<any>([]);\n\n  useEffect(() => {\n    socket.emit(\"connexion\", user);\n    console.log(\"first\");\n  }, []);\n\n  console.log(users);\n\n  useEffect(() => {\n    // socket.on(\"connect\", () => {\n    //   socket.emit(\"username\", user.username);\n    // });\n\n    socket.on(\"connexion\", (users: any) => {\n      setUsers(users);\n    });\n\n    socket.on(\"message\", (message: any) => {\n      setMessages([...messages, message]);\n    });\n\n    // socket.on(\"disconnected\", (id) => {\n    //   setUsers((users: any) => {\n    //     return users.filter((user: any) => user.id !== id);\n    //   });\n    // });\n  }, []);\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div style={{ marginRight: \"100px\" }}>\n        {conversations.map((conversation) => {\n          return (\n            <div key={conversation._id}>\n              {conversation.membersInfos.map((member) => {\n                if (member._id !== user._id)\n                  return (\n                    <div\n                      onClick={() => setSelectedConversation(conversation)}\n                      key={member._id}\n                    >\n                      {member.username}\n                    </div>\n                  );\n              })}\n            </div>\n          );\n        })}\n      </div>\n      <div>\n        {messages.map((message) => {\n          return <div key={message._id}>{message.content}</div>;\n        })}\n        <input\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"your message\"\n        ></input>\n        <button onClick={sendMessage}>SEND</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}