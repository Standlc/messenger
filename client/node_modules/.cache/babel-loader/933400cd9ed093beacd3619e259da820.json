{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/ChatInput.tsx\",\n    _s = $RefreshSig$();\n\nimport { Send } from \"@mui/icons-material\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./chatInput.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatInput = _ref => {\n  _s();\n\n  let {\n    sendMessage\n  } = _ref;\n  const [messageInput, setMessageInput] = useState(\"\");\n  const textAreaRef = useRef(null);\n\n  const handleInput = e => {\n    setMessageInput(e.target.value);\n    autoGrow();\n  }; //AUTO GROW\n\n\n  const verticlePadding = 15;\n\n  const autoGrow = () => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"0px\";\n      textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight - verticlePadding}px`;\n    }\n  };\n\n  useEffect(() => {\n    autoGrow();\n  }, [textAreaRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-input-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textAreaRef,\n      className: messageInput ? \"chat-input active\" : \"chat-input\",\n      value: messageInput,\n      onChange: handleInput,\n      placeholder: \"Your message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: messageInput ? \"chat-input-send-button active\" : \"chat-input-send-button\",\n      onClick: () => sendMessage({\n        messageInput,\n        setMessageInput\n      }),\n      children: /*#__PURE__*/_jsxDEV(Send, {\n        fontSize: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatInput, \"2Wi7QFMuJe2l2ZdPEgPBaRaRYOY=\");\n\n_c = ChatInput;\nexport default ChatInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/ChatInput.tsx"],"names":["Send","React","useEffect","useRef","useState","ChatInput","sendMessage","messageInput","setMessageInput","textAreaRef","handleInput","e","target","value","autoGrow","verticlePadding","current","style","height","scrollHeight"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,qBAArB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAG,QAUZ;AAAA;;AAAA,MAVa;AACjBC,IAAAA;AADiB,GAUb;AACJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAS,EAAT,CAAhD;AAEA,QAAMK,WAAW,GAAGN,MAAM,CAAsB,IAAtB,CAA1B;;AAEA,QAAMO,WAAW,GAAIC,CAAD,IAAY;AAC9BH,IAAAA,eAAe,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACAC,IAAAA,QAAQ;AACT,GAHD,CALI,CAUJ;;;AACA,QAAMC,eAAe,GAAG,EAAxB;;AACA,QAAMD,QAAQ,GAAG,MAAM;AACrB,QAAIL,WAAW,CAACO,OAAhB,EAAyB;AACvBP,MAAAA,WAAW,CAACO,OAAZ,CAAoBC,KAApB,CAA0BC,MAA1B,GAAmC,KAAnC;AACAT,MAAAA,WAAW,CAACO,OAAZ,CAAoBC,KAApB,CAA0BC,MAA1B,GAAoC,GAClCT,WAAW,CAACO,OAAZ,CAAoBG,YAApB,GAAmCJ,eACpC,IAFD;AAGD;AACF,GAPD;;AAQAb,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACL,WAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACE;AACE,MAAA,GAAG,EAAEA,WADP;AAEE,MAAA,SAAS,EAAEF,YAAY,GAAG,mBAAH,GAAyB,YAFlD;AAGE,MAAA,KAAK,EAAEA,YAHT;AAIE,MAAA,QAAQ,EAAEG,WAJZ;AAKE,MAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AACE,MAAA,SAAS,EACPH,YAAY,GACR,+BADQ,GAER,wBAJR;AAME,MAAA,OAAO,EAAE,MAAMD,WAAW,CAAC;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,OAAD,CAN5B;AAAA,6BAQE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAxDD;;GAAMH,S;;KAAAA,S;AA0DN,eAAeA,SAAf","sourcesContent":["import { Send } from \"@mui/icons-material\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./chatInput.css\";\n\nconst ChatInput = ({\n  sendMessage,\n}: {\n  sendMessage: ({\n    messageInput,\n    setMessageInput,\n  }: {\n    messageInput: string;\n    setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  }) => Promise<void>;\n}) => {\n  const [messageInput, setMessageInput] = useState<string>(\"\");\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleInput = (e: any) => {\n    setMessageInput(e.target.value);\n    autoGrow();\n  };\n\n  //AUTO GROW\n  const verticlePadding = 15;\n  const autoGrow = () => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"0px\";\n      textAreaRef.current.style.height = `${\n        textAreaRef.current.scrollHeight - verticlePadding\n      }px`;\n    }\n  };\n  useEffect(() => {\n    autoGrow();\n  }, [textAreaRef]);\n\n  return (\n    <div className=\"chat-input-wrapper\">\n      <textarea\n        ref={textAreaRef}\n        className={messageInput ? \"chat-input active\" : \"chat-input\"}\n        value={messageInput}\n        onChange={handleInput}\n        placeholder=\"Your message...\"\n      ></textarea>\n\n      <button\n        className={\n          messageInput\n            ? \"chat-input-send-button active\"\n            : \"chat-input-send-button\"\n        }\n        onClick={() => sendMessage({ messageInput, setMessageInput })}\n      >\n        <Send fontSize=\"large\" />\n      </button>\n    </div>\n  );\n};\n\nexport default ChatInput;\n"]},"metadata":{},"sourceType":"module"}