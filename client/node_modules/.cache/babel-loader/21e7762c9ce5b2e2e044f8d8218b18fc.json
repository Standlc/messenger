{"ast":null,"code":"import { DateTime } from \"luxon\";\nexport const hasCloseNeighbor = _ref => {\n  var _messages$i;\n\n  let {\n    order,\n    messages,\n    i\n  } = _ref;\n  const neighborMessage = order === \"next\" ? messages[i - 1] : messages[i + 1];\n  const isNeighborOwnMessage = (neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.userInfos._id) === ((_messages$i = messages[i]) === null || _messages$i === void 0 ? void 0 : _messages$i.userInfos._id);\n  if (!neighborMessage || !isNeighborOwnMessage) return false;\n  const neighborMessageDate = neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.createdAt;\n  const messageDate = messages[i].createdAt;\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString().substring(0, 4),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString().substring(5, 7),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString().substring(8, 10),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString().substring(11, 13)\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\";\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  if (order === \"next\") {\n    if (time(messageDate, \"year\") < time(neighborMessageDate, \"year\")) return;\n    if (time(messageDate, \"month\") < time(neighborMessageDate, \"month\")) return;\n    if (time(messageDate, \"day\") < time(neighborMessageDate, \"day\")) return;\n    if (time(messageDate, \"hour\") < time(neighborMessageDate, \"hour\")) return;\n    return !(time(messageDate, \"minute\") < time(neighborMessageDate, \"minute\"));\n  } else {\n    if (time(messageDate, \"year\") > time(neighborMessageDate, \"year\")) return;\n    if (time(messageDate, \"month\") > time(neighborMessageDate, \"month\")) return;\n    if (time(messageDate, \"day\") > time(neighborMessageDate, \"day\")) return;\n    if (time(messageDate, \"hour\") > time(neighborMessageDate, \"hour\")) return;\n    return !(time(messageDate, \"minute\") > time(neighborMessageDate, \"minute\"));\n  }\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx"],"names":["DateTime","hasCloseNeighbor","order","messages","i","neighborMessage","isNeighborOwnMessage","userInfos","_id","neighborMessageDate","createdAt","messageDate","time","messageCreatedAt","dateType","table","year","fromISO","toLocaleString","substring","month","day","hour","isValidDateType"],"mappings":"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","sourcesContent":["import { Message } from \"../../../ChatApp\";\nimport { DateTime } from \"luxon\";\n\nexport const hasCloseNeighbor = ({\n  order,\n  messages,\n  i,\n}: {\n  order: string;\n  messages: Message[];\n  i: number;\n}) => {\n  const neighborMessage = order === \"next\" ? messages[i - 1] : messages[i + 1];\n\n  const isNeighborOwnMessage =\n    neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n\n  if (!neighborMessage || !isNeighborOwnMessage) return false;\n\n  const neighborMessageDate = neighborMessage?.createdAt;\n\n  const messageDate = messages[i].createdAt;\n\n  const time = (messageCreatedAt: string, dateType: string) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString().substring(0, 4),\n      month: DateTime.fromISO(messageCreatedAt)\n        .toLocaleString()\n        .substring(5, 7),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString().substring(8, 10),\n      hour: DateTime.fromISO(messageCreatedAt)\n        .toLocaleString()\n        .substring(11, 13),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\";\n\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  if (order === \"next\") {\n    if (time(messageDate, \"year\") < time(neighborMessageDate, \"year\")) return;\n\n    if (time(messageDate, \"month\") < time(neighborMessageDate, \"month\")) return;\n\n    if (time(messageDate, \"day\") < time(neighborMessageDate, \"day\")) return;\n\n    if (time(messageDate, \"hour\") < time(neighborMessageDate, \"hour\")) return;\n\n    return !(time(messageDate, \"minute\") < time(neighborMessageDate, \"minute\"));\n  } else {\n    if (time(messageDate, \"year\") > time(neighborMessageDate, \"year\")) return;\n\n    if (time(messageDate, \"month\") > time(neighborMessageDate, \"month\")) return;\n\n    if (time(messageDate, \"day\") > time(neighborMessageDate, \"day\")) return;\n\n    if (time(messageDate, \"hour\") > time(neighborMessageDate, \"hour\")) return;\n\n    return !(time(messageDate, \"minute\") > time(neighborMessageDate, \"minute\"));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}