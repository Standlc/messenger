{"ast":null,"code":"export const hasCloseNeighbor = _ref => {\n  var _messages$i;\n\n  let {\n    order,\n    messages,\n    i\n  } = _ref;\n  const neighborMessage = order === \"next\" ? messages[i + 1] : messages[i - 1];\n  const neighborMessageTime = order === \"next\" ? neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.createdAt : neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.createdAt;\n  const currentMessageTime = messages[i].createdAt;\n  const isNeighborOwnMessage = (neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.userInfos._id) === ((_messages$i = messages[i]) === null || _messages$i === void 0 ? void 0 : _messages$i.userInfos._id);\n  if (!neighborMessage || !isNeighborOwnMessage) return false; // const current = DateTime.fromISO(messages[i].createdAt);\n  // const neighbor = DateTime.fromISO(messages[i + 1].createdAt);\n  // const diff = current.diff(neighbor, \"hours\");\n  // console.log(neighbor.diff(current, \"seconds\").toObject());\n  // const time = (messageCreatedAt: Date, dateType: string) => {\n  //   const table = {\n  //     year: moment(messageCreatedAt).format().substring(0, 4),\n  //     month: moment(messageCreatedAt).format().substring(5, 7),\n  //     day: moment(messageCreatedAt).format().substring(8, 10),\n  //     hour: moment(messageCreatedAt).format().substring(11, 13),\n  //     minute: moment(messageCreatedAt).format().substring(14, 16),\n  //   };\n  //   const isValidDateType =\n  //     dateType === \"year\" ||\n  //     dateType === \"month\" ||\n  //     dateType === \"day\" ||\n  //     dateType === \"hour\" ||\n  //     dateType === \"minute\";\n  //   return table[isValidDateType ? dateType : \"year\"];\n  // };\n  // if (order === \"next\") {\n  //   if (time(currentMessageTime, \"year\") < time(neighborMessageTime, \"year\"))\n  //     return;\n  //   if (time(currentMessageTime, \"month\") < time(neighborMessageTime, \"month\"))\n  //     return;\n  //   if (time(currentMessageTime, \"day\") < time(neighborMessageTime, \"day\"))\n  //     return;\n  //   if (time(currentMessageTime, \"hour\") < time(neighborMessageTime, \"hour\"))\n  //     return;\n  //   return !(\n  //     time(currentMessageTime, \"minute\") < time(neighborMessageTime, \"minute\")\n  //   );\n  // } else {\n  //   if (time(currentMessageTime, \"year\") > time(neighborMessageTime, \"year\"))\n  //     return;\n  //   if (time(currentMessageTime, \"month\") > time(neighborMessageTime, \"month\"))\n  //     return;\n  //   if (time(currentMessageTime, \"day\") > time(neighborMessageTime, \"day\"))\n  //     return;\n  //   if (time(currentMessageTime, \"hour\") > time(neighborMessageTime, \"hour\"))\n  //     return;\n  //   return !(\n  //     time(currentMessageTime, \"minute\") > time(neighborMessageTime, \"minute\")\n  //   );\n  // }\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx"],"names":["hasCloseNeighbor","order","messages","i","neighborMessage","neighborMessageTime","createdAt","currentMessageTime","isNeighborOwnMessage","userInfos","_id"],"mappings":"AAGA,OAAO,MAAMA,gBAAgB,GAAG,QAQ1B;AAAA;;AAAA,MAR2B;AAC/BC,IAAAA,KAD+B;AAE/BC,IAAAA,QAF+B;AAG/BC,IAAAA;AAH+B,GAQ3B;AACJ,QAAMC,eAAe,GAAGH,KAAK,KAAK,MAAV,GAAmBC,QAAQ,CAACC,CAAC,GAAG,CAAL,CAA3B,GAAqCD,QAAQ,CAACC,CAAC,GAAG,CAAL,CAArE;AAEA,QAAME,mBAAmB,GACvBJ,KAAK,KAAK,MAAV,GAAmBG,eAAnB,aAAmBA,eAAnB,uBAAmBA,eAAe,CAAEE,SAApC,GAAgDF,eAAhD,aAAgDA,eAAhD,uBAAgDA,eAAe,CAAEE,SADnE;AAGA,QAAMC,kBAAkB,GAAGL,QAAQ,CAACC,CAAD,CAAR,CAAYG,SAAvC;AAEA,QAAME,oBAAoB,GACxB,CAAAJ,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEK,SAAjB,CAA2BC,GAA3B,sBAAmCR,QAAQ,CAACC,CAAD,CAA3C,gDAAmC,YAAaM,SAAb,CAAuBC,GAA1D,CADF;AAGA,MAAI,CAACN,eAAD,IAAoB,CAACI,oBAAzB,EAA+C,OAAO,KAAP,CAX3C,CAaJ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACD,CA7EM","sourcesContent":["import { DateTime } from \"luxon\";\nimport { Message } from \"../../../ChatApp\";\n\nexport const hasCloseNeighbor = ({\n  order,\n  messages,\n  i,\n}: {\n  order: string;\n  messages: Message[];\n  i: number;\n}) => {\n  const neighborMessage = order === \"next\" ? messages[i + 1] : messages[i - 1];\n\n  const neighborMessageTime =\n    order === \"next\" ? neighborMessage?.createdAt : neighborMessage?.createdAt;\n\n  const currentMessageTime = messages[i].createdAt;\n\n  const isNeighborOwnMessage =\n    neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n\n  if (!neighborMessage || !isNeighborOwnMessage) return false;\n\n  // const current = DateTime.fromISO(messages[i].createdAt);\n  // const neighbor = DateTime.fromISO(messages[i + 1].createdAt);\n  // const diff = current.diff(neighbor, \"hours\");\n  // console.log(neighbor.diff(current, \"seconds\").toObject());\n\n  // const time = (messageCreatedAt: Date, dateType: string) => {\n  //   const table = {\n  //     year: moment(messageCreatedAt).format().substring(0, 4),\n  //     month: moment(messageCreatedAt).format().substring(5, 7),\n  //     day: moment(messageCreatedAt).format().substring(8, 10),\n  //     hour: moment(messageCreatedAt).format().substring(11, 13),\n  //     minute: moment(messageCreatedAt).format().substring(14, 16),\n  //   };\n  //   const isValidDateType =\n  //     dateType === \"year\" ||\n  //     dateType === \"month\" ||\n  //     dateType === \"day\" ||\n  //     dateType === \"hour\" ||\n  //     dateType === \"minute\";\n\n  //   return table[isValidDateType ? dateType : \"year\"];\n  // };\n\n  // if (order === \"next\") {\n  //   if (time(currentMessageTime, \"year\") < time(neighborMessageTime, \"year\"))\n  //     return;\n\n  //   if (time(currentMessageTime, \"month\") < time(neighborMessageTime, \"month\"))\n  //     return;\n\n  //   if (time(currentMessageTime, \"day\") < time(neighborMessageTime, \"day\"))\n  //     return;\n\n  //   if (time(currentMessageTime, \"hour\") < time(neighborMessageTime, \"hour\"))\n  //     return;\n\n  //   return !(\n  //     time(currentMessageTime, \"minute\") < time(neighborMessageTime, \"minute\")\n  //   );\n  // } else {\n  //   if (time(currentMessageTime, \"year\") > time(neighborMessageTime, \"year\"))\n  //     return;\n\n  //   if (time(currentMessageTime, \"month\") > time(neighborMessageTime, \"month\"))\n  //     return;\n\n  //   if (time(currentMessageTime, \"day\") > time(neighborMessageTime, \"day\"))\n  //     return;\n\n  //   if (time(currentMessageTime, \"hour\") > time(neighborMessageTime, \"hour\"))\n  //     return;\n\n  //   return !(\n  //     time(currentMessageTime, \"minute\") > time(neighborMessageTime, \"minute\")\n  //   );\n  // }\n};\n"]},"metadata":{},"sourceType":"module"}