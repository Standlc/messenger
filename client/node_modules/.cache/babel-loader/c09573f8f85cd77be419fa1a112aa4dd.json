{"ast":null,"code":"import moment from \"moment\";\nexport const isMessageClose = _ref => {\n  var _messages, _messages2;\n\n  let {\n    order,\n    messages,\n    i\n  } = _ref;\n  const neighborMessageTime = order === \"next\" ? (_messages = messages[i + 1]) === null || _messages === void 0 ? void 0 : _messages.createdAt : (_messages2 = messages[i - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.createdAt;\n  const currentMessage = messages[i].createdAt;\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: moment(messageCreatedAt).format().substring(0, 4),\n      month: moment(messageCreatedAt).format().substring(5, 7),\n      day: moment(messageCreatedAt).format().substring(8, 10),\n      hour: moment(messageCreatedAt).format().substring(11, 13),\n      minute: moment(messageCreatedAt).format().substring(14, 16)\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\" || dateType === \"minute\";\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  if (!messages[i + 1] || !neighborMessageTime) return false;\n  if (time(currentMessage, \"year\") < time(neighborMessageTime, \"year\")) return false;\n  if (time(currentMessage, \"month\") < time(neighborMessageTime, \"month\")) return false;\n  if (time(currentMessage, \"day\") < time(neighborMessageTime, \"day\")) return false;\n  if (time(currentMessage, \"hour\") < time(neighborMessageTime, \"hour\")) return false;\n  if (time(currentMessage, \"minute\") < time(neighborMessageTime, \"minute\")) return false;\n  console.log(time(currentMessage, \"minute\") < time(neighborMessageTime, \"minute\"));\n  return true;\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx"],"names":["moment","isMessageClose","order","messages","i","neighborMessageTime","createdAt","currentMessage","time","messageCreatedAt","dateType","table","year","format","substring","month","day","hour","minute","isValidDateType","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAGA,OAAO,MAAMC,cAAc,GAAG,QAQxB;AAAA;;AAAA,MARyB;AAC7BC,IAAAA,KAD6B;AAE7BC,IAAAA,QAF6B;AAG7BC,IAAAA;AAH6B,GAQzB;AACJ,QAAMC,mBAAmB,GACvBH,KAAK,KAAK,MAAV,gBAAmBC,QAAQ,CAACC,CAAC,GAAG,CAAL,CAA3B,8CAAmB,UAAiBE,SAApC,iBAAgDH,QAAQ,CAACC,CAAC,GAAG,CAAL,CAAxD,+CAAgD,WAAiBE,SADnE;AAEA,QAAMC,cAAc,GAAGJ,QAAQ,CAACC,CAAD,CAAR,CAAYE,SAAnC;;AAEA,QAAME,IAAI,GAAG,CAACC,gBAAD,EAAyBC,QAAzB,KAA8C;AACzD,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAEZ,MAAM,CAACS,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,CAA5C,EAA+C,CAA/C,CADM;AAEZC,MAAAA,KAAK,EAAEf,MAAM,CAACS,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,CAA5C,EAA+C,CAA/C,CAFK;AAGZE,MAAAA,GAAG,EAAEhB,MAAM,CAACS,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,CAA5C,EAA+C,EAA/C,CAHO;AAIZG,MAAAA,IAAI,EAAEjB,MAAM,CAACS,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,EAA5C,EAAgD,EAAhD,CAJM;AAKZI,MAAAA,MAAM,EAAElB,MAAM,CAACS,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,EAA5C,EAAgD,EAAhD;AALI,KAAd;AAOA,UAAMK,eAAe,GACnBT,QAAQ,KAAK,MAAb,IACAA,QAAQ,KAAK,OADb,IAEAA,QAAQ,KAAK,KAFb,IAGAA,QAAQ,KAAK,MAHb,IAIAA,QAAQ,KAAK,QALf;AAOA,WAAOC,KAAK,CAACQ,eAAe,GAAGT,QAAH,GAAc,MAA9B,CAAZ;AACD,GAhBD;;AAkBA,MAAI,CAACP,QAAQ,CAACC,CAAC,GAAG,CAAL,CAAT,IAAoB,CAACC,mBAAzB,EAA8C,OAAO,KAAP;AAE9C,MAAIG,IAAI,CAACD,cAAD,EAAiB,MAAjB,CAAJ,GAA+BC,IAAI,CAACH,mBAAD,EAAsB,MAAtB,CAAvC,EACE,OAAO,KAAP;AACF,MAAIG,IAAI,CAACD,cAAD,EAAiB,OAAjB,CAAJ,GAAgCC,IAAI,CAACH,mBAAD,EAAsB,OAAtB,CAAxC,EACE,OAAO,KAAP;AAEF,MAAIG,IAAI,CAACD,cAAD,EAAiB,KAAjB,CAAJ,GAA8BC,IAAI,CAACH,mBAAD,EAAsB,KAAtB,CAAtC,EACE,OAAO,KAAP;AAEF,MAAIG,IAAI,CAACD,cAAD,EAAiB,MAAjB,CAAJ,GAA+BC,IAAI,CAACH,mBAAD,EAAsB,MAAtB,CAAvC,EACE,OAAO,KAAP;AAEF,MAAIG,IAAI,CAACD,cAAD,EAAiB,QAAjB,CAAJ,GAAiCC,IAAI,CAACH,mBAAD,EAAsB,QAAtB,CAAzC,EACE,OAAO,KAAP;AACFe,EAAAA,OAAO,CAACC,GAAR,CACEb,IAAI,CAACD,cAAD,EAAiB,QAAjB,CAAJ,GAAiCC,IAAI,CAACH,mBAAD,EAAsB,QAAtB,CADvC;AAGA,SAAO,IAAP;AACD,CAlDM","sourcesContent":["import moment from \"moment\";\nimport { Message } from \"../../../ChatApp\";\n\nexport const isMessageClose = ({\n  order,\n  messages,\n  i,\n}: {\n  order: string;\n  messages: Message[];\n  i: number;\n}) => {\n  const neighborMessageTime =\n    order === \"next\" ? messages[i + 1]?.createdAt : messages[i - 1]?.createdAt;\n  const currentMessage = messages[i].createdAt;\n\n  const time = (messageCreatedAt: Date, dateType: string) => {\n    const table = {\n      year: moment(messageCreatedAt).format().substring(0, 4),\n      month: moment(messageCreatedAt).format().substring(5, 7),\n      day: moment(messageCreatedAt).format().substring(8, 10),\n      hour: moment(messageCreatedAt).format().substring(11, 13),\n      minute: moment(messageCreatedAt).format().substring(14, 16),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\" ||\n      dateType === \"minute\";\n\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  if (!messages[i + 1] || !neighborMessageTime) return false;\n\n  if (time(currentMessage, \"year\") < time(neighborMessageTime, \"year\"))\n    return false;\n  if (time(currentMessage, \"month\") < time(neighborMessageTime, \"month\"))\n    return false;\n\n  if (time(currentMessage, \"day\") < time(neighborMessageTime, \"day\"))\n    return false;\n\n  if (time(currentMessage, \"hour\") < time(neighborMessageTime, \"hour\"))\n    return false;\n\n  if (time(currentMessage, \"minute\") < time(neighborMessageTime, \"minute\"))\n    return false;\n  console.log(\n    time(currentMessage, \"minute\") < time(neighborMessageTime, \"minute\")\n  );\n  return true;\n};\n"]},"metadata":{},"sourceType":"module"}