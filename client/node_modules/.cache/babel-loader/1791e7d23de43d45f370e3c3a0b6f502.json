{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/ChatInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ChatsContext } from \"../../../contexts/ChatsProvider\";\nimport { UserContext } from \"../../../contexts/UserProvider\";\nimport \"./chatInput.css\";\nimport { sendMessage } from \"./sendMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatInput = _ref => {\n  _s();\n\n  let {} = _ref;\n  const [messageInput, setMessageInput] = useState(\"\");\n  const {\n    chats\n  } = useContext(ChatsContext);\n  const {\n    user\n  } = useContext(UserContext);\n  const currentChatId = useParams().chatId;\n  const textAreaRef = useRef(null);\n\n  const handleInput = e => {\n    setMessageInput(e.target.value);\n    autoGrow();\n  }; //AUTO GROW\n\n\n  const verticlePadding = 15;\n\n  const autoGrow = () => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"0px\";\n      textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight - verticlePadding}px`;\n    }\n  };\n\n  useEffect(() => {\n    autoGrow();\n  }, [textAreaRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-input-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textAreaRef,\n      className: \"chat-input\",\n      value: messageInput,\n      onChange: handleInput,\n      placeholder: \"Your message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: messageInput ? \"chat-input-send-button active\" : \"chat-input-send-button\",\n      onClick: () => sendMessage({\n        messageInput,\n        setMessageInput,\n        user,\n        chats,\n        currentChatId\n      }),\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatInput, \"5Y32rbkdQLJh70dsVD/6pq1Zzqs=\", false, function () {\n  return [useParams];\n});\n\n_c = ChatInput;\nexport default ChatInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/ChatInput.tsx"],"names":["React","useContext","useEffect","useRef","useState","useParams","ChatsContext","UserContext","sendMessage","ChatInput","messageInput","setMessageInput","chats","user","currentChatId","chatId","textAreaRef","handleInput","e","target","value","autoGrow","verticlePadding","current","style","height","scrollHeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,OAAO,iBAAP;AACA,SAASC,WAAT,QAA4B,eAA5B;;;AAEA,MAAMC,SAAS,GAAG,QAQZ;AAAA;;AAAA,MARa,EAQb;AACJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAS,EAAT,CAAhD;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAYX,UAAU,CAACK,YAAD,CAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAWZ,UAAU,CAACM,WAAD,CAA3B;AACA,QAAMO,aAAa,GAAGT,SAAS,GAAGU,MAAlC;AACA,QAAMC,WAAW,GAAGb,MAAM,CAAsB,IAAtB,CAA1B;;AAEA,QAAMc,WAAW,GAAIC,CAAD,IAAY;AAC9BP,IAAAA,eAAe,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACAC,IAAAA,QAAQ;AACT,GAHD,CAPI,CAYJ;;;AACA,QAAMC,eAAe,GAAG,EAAxB;;AACA,QAAMD,QAAQ,GAAG,MAAM;AACrB,QAAIL,WAAW,CAACO,OAAhB,EAAyB;AACvBP,MAAAA,WAAW,CAACO,OAAZ,CAAoBC,KAApB,CAA0BC,MAA1B,GAAmC,KAAnC;AACAT,MAAAA,WAAW,CAACO,OAAZ,CAAoBC,KAApB,CAA0BC,MAA1B,GAAoC,GAClCT,WAAW,CAACO,OAAZ,CAAoBG,YAApB,GAAmCJ,eACpC,IAFD;AAGD;AACF,GAPD;;AAQApB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACL,WAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACE;AACE,MAAA,GAAG,EAAEA,WADP;AAEE,MAAA,SAAS,EAAC,YAFZ;AAGE,MAAA,KAAK,EAAEN,YAHT;AAIE,MAAA,QAAQ,EAAEO,WAJZ;AAKE,MAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AACE,MAAA,SAAS,EACPP,YAAY,GACR,+BADQ,GAER,wBAJR;AAME,MAAA,OAAO,EAAE,MACPF,WAAW,CAAC;AACVE,QAAAA,YADU;AAEVC,QAAAA,eAFU;AAGVE,QAAAA,IAHU;AAIVD,QAAAA,KAJU;AAKVE,QAAAA;AALU,OAAD,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAhED;;GAAML,S;UAYkBJ,S;;;KAZlBI,S;AAkEN,eAAeA,SAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ChatsContext } from \"../../../contexts/ChatsProvider\";\nimport { UserContext } from \"../../../contexts/UserProvider\";\nimport \"./chatInput.css\";\nimport { sendMessage } from \"./sendMessage\";\n\nconst ChatInput = ({}: {\n  sendMessage: ({\n    messageInput,\n    setMessageInput,\n  }: {\n    messageInput: string;\n    setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  }) => Promise<void>;\n}) => {\n  const [messageInput, setMessageInput] = useState<string>(\"\");\n  const { chats } = useContext(ChatsContext);\n  const { user } = useContext(UserContext);\n  const currentChatId = useParams().chatId;\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleInput = (e: any) => {\n    setMessageInput(e.target.value);\n    autoGrow();\n  };\n\n  //AUTO GROW\n  const verticlePadding = 15;\n  const autoGrow = () => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"0px\";\n      textAreaRef.current.style.height = `${\n        textAreaRef.current.scrollHeight - verticlePadding\n      }px`;\n    }\n  };\n  useEffect(() => {\n    autoGrow();\n  }, [textAreaRef]);\n\n  return (\n    <div className=\"chat-input-wrapper\">\n      <textarea\n        ref={textAreaRef}\n        className=\"chat-input\"\n        value={messageInput}\n        onChange={handleInput}\n        placeholder=\"Your message...\"\n      ></textarea>\n\n      <button\n        className={\n          messageInput\n            ? \"chat-input-send-button active\"\n            : \"chat-input-send-button\"\n        }\n        onClick={() =>\n          sendMessage({\n            messageInput,\n            setMessageInput,\n            user,\n            chats,\n            currentChatId,\n          })\n        }\n      >\n        Send\n      </button>\n    </div>\n  );\n};\n\nexport default ChatInput;\n"]},"metadata":{},"sourceType":"module"}