{"ast":null,"code":"import { DateTime } from \"luxon\";\nexport const hasAboveNeighborOfSameTime = _ref => {\n  let {\n    messages,\n    i\n  } = _ref;\n  const messageAbove = messages[i - 1];\n  if (!messageAbove) return false;\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        year: \"2-digit\"\n      }),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        month: \"2-digit\"\n      }),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        day: \"2-digit\"\n      }),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        hour: \"2-digit\",\n        hourCycle: \"h23\"\n      })\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\";\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  console.log(time(messages[i].createdAt, \"month\") < time(messageAbove.createdAt, \"month\"));\n  if (time(messages[i].createdAt, \"year\") < time(messageAbove.createdAt, \"year\")) return;\n  if (time(messages[i].createdAt, \"month\") < time(messageAbove.createdAt, \"year\")) return;\n  if (time(messages[i].createdAt, \"day\") < time(messageAbove.createdAt, \"year\")) return;\n  if (time(messages[i].createdAt, \"hour\") < time(messageAbove.createdAt, \"year\")) return;\n  return false;\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/chatTime/hasAboveNeighbor.tsx"],"names":["DateTime","hasAboveNeighborOfSameTime","messages","i","messageAbove","time","messageCreatedAt","dateType","table","year","fromISO","toLocaleString","month","day","hour","hourCycle","isValidDateType","console","log","createdAt"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAGA,OAAO,MAAMC,0BAA0B,GAAG,QAMpC;AAAA,MANqC;AACzCC,IAAAA,QADyC;AAEzCC,IAAAA;AAFyC,GAMrC;AACJ,QAAMC,YAAY,GAAGF,QAAQ,CAACC,CAAC,GAAG,CAAL,CAA7B;AACA,MAAI,CAACC,YAAL,EAAmB,OAAO,KAAP;;AAEnB,QAAMC,IAAI,GAAG,CAACC,gBAAD,EAA2BC,QAA3B,KAAgD;AAC3D,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAET,QAAQ,CAACU,OAAT,CAAiBJ,gBAAjB,EAAmCK,cAAnC,CAAkD;AACtDF,QAAAA,IAAI,EAAE;AADgD,OAAlD,CADM;AAIZG,MAAAA,KAAK,EAAEZ,QAAQ,CAACU,OAAT,CAAiBJ,gBAAjB,EAAmCK,cAAnC,CAAkD;AACvDC,QAAAA,KAAK,EAAE;AADgD,OAAlD,CAJK;AAOZC,MAAAA,GAAG,EAAEb,QAAQ,CAACU,OAAT,CAAiBJ,gBAAjB,EAAmCK,cAAnC,CAAkD;AACrDE,QAAAA,GAAG,EAAE;AADgD,OAAlD,CAPO;AAUZC,MAAAA,IAAI,EAAEd,QAAQ,CAACU,OAAT,CAAiBJ,gBAAjB,EAAmCK,cAAnC,CAAkD;AACtDG,QAAAA,IAAI,EAAE,SADgD;AAEtDC,QAAAA,SAAS,EAAE;AAF2C,OAAlD;AAVM,KAAd;AAeA,UAAMC,eAAe,GACnBT,QAAQ,KAAK,MAAb,IACAA,QAAQ,KAAK,OADb,IAEAA,QAAQ,KAAK,KAFb,IAGAA,QAAQ,KAAK,MAJf;AAMA,WAAOC,KAAK,CAACQ,eAAe,GAAGT,QAAH,GAAc,MAA9B,CAAZ;AACD,GAvBD;;AAyBAU,EAAAA,OAAO,CAACC,GAAR,CACEb,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYgB,SAAb,EAAwB,OAAxB,CAAJ,GAAuCd,IAAI,CAACD,YAAY,CAACe,SAAd,EAAyB,OAAzB,CAD7C;AAGA,MACEd,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYgB,SAAb,EAAwB,MAAxB,CAAJ,GAAsCd,IAAI,CAACD,YAAY,CAACe,SAAd,EAAyB,MAAzB,CAD5C,EAGE;AACF,MACEd,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYgB,SAAb,EAAwB,OAAxB,CAAJ,GAAuCd,IAAI,CAACD,YAAY,CAACe,SAAd,EAAyB,MAAzB,CAD7C,EAGE;AACF,MAAId,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYgB,SAAb,EAAwB,KAAxB,CAAJ,GAAqCd,IAAI,CAACD,YAAY,CAACe,SAAd,EAAyB,MAAzB,CAA7C,EACE;AACF,MACEd,IAAI,CAACH,QAAQ,CAACC,CAAD,CAAR,CAAYgB,SAAb,EAAwB,MAAxB,CAAJ,GAAsCd,IAAI,CAACD,YAAY,CAACe,SAAd,EAAyB,MAAzB,CAD5C,EAGE;AAEF,SAAO,KAAP;AACD,CAtDM","sourcesContent":["import { DateTime } from \"luxon\";\nimport { Message } from \"../../../../../ChatApp\";\n\nexport const hasAboveNeighborOfSameTime = ({\n  messages,\n  i,\n}: {\n  messages: Message[];\n  i: number;\n}) => {\n  const messageAbove = messages[i - 1];\n  if (!messageAbove) return false;\n\n  const time = (messageCreatedAt: string, dateType: string) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        year: \"2-digit\",\n      }),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        month: \"2-digit\",\n      }),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        day: \"2-digit\",\n      }),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        hour: \"2-digit\",\n        hourCycle: \"h23\",\n      }),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\";\n\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  console.log(\n    time(messages[i].createdAt, \"month\") < time(messageAbove.createdAt, \"month\")\n  );\n  if (\n    time(messages[i].createdAt, \"year\") < time(messageAbove.createdAt, \"year\")\n  )\n    return;\n  if (\n    time(messages[i].createdAt, \"month\") < time(messageAbove.createdAt, \"year\")\n  )\n    return;\n  if (time(messages[i].createdAt, \"day\") < time(messageAbove.createdAt, \"year\"))\n    return;\n  if (\n    time(messages[i].createdAt, \"hour\") < time(messageAbove.createdAt, \"year\")\n  )\n    return;\n\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}