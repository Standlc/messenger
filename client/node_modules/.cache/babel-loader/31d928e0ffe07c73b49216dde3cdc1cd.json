{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/ChatApp.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport ConversationSideBar from \"./components/sideBarConversationsList/SideBarConversationsList\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./chatApp.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\nimport { useParams } from \"react-router-dom\";\nimport ChatHeader from \"./components/chat/chatHeader/ChatHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [chats, setChats] = useState([]);\n  const currentChatParamsId = useParams().chatId; //GET USER\n\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []); //WEB SOCKET\n\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newUser\", user === null || user === void 0 ? void 0 : user._id);\n  }, [socket, user]);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", message => {\n      setMessages(prev => [...prev, message]);\n    });\n  }, [socket]);\n\n  const emitNewMessageSocket = (message, receiversIds) => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newMessage\", {\n      message,\n      receiversIds\n    });\n  };\n\n  const updateChatLastMessage = message => {// if (!currentConversation) return;\n    // console.log({ ...currentConversation, lastMessage: message });\n    // setCurrentConversation({ ...currentConversation, lastMessage: message });\n  };\n\n  const sortMessages = data => {\n    setMessages(data.sort((m1, m2) => {\n      return new Date(m2.createdAt).valueOf() - new Date(m1.createdAt).valueOf();\n    }));\n  }; //GET CONVERSATIONS\n\n\n  useEffect(() => {\n    const getChats = async () => {\n      const res = await axios.get(`http://localhost:5050/api/conversations/${user === null || user === void 0 ? void 0 : user._id}`);\n      setChats(res.data);\n    };\n\n    getChats();\n  }, [user]); //GET MESSAGES\n\n  useEffect(() => {\n    if (!currentChatParamsId) return;\n\n    const getMessages = async () => {\n      const res = await axios.get(`http://localhost:5050/api/messages/${currentChatParamsId}`);\n      sortMessages(res.data);\n    };\n\n    getMessages();\n  }, [currentChatParamsId]); //SEND MESSAGE\n\n  const sendMessage = async _ref => {\n    let {\n      messageInput,\n      setMessageInput\n    } = _ref;\n    if (messageInput === \"\" || !user) return;\n    const res = await axios.post(`http://localhost:5050/api/messages/${currentChatParamsId}`, {\n      content: messageInput,\n      userID: user._id,\n      conversationID: currentChatParamsId\n    });\n    const currentConversation = chats.find(conversation => conversation._id === currentChatParamsId);\n    if (!currentConversation) return;\n    const membersIds = currentConversation.membersInfos.map(member => member._id);\n    const receiversIds = membersIds.filter(id => id !== user._id);\n    const {\n      userID,\n      ...others\n    } = res.data;\n    const messageCopy = { ...others,\n      userInfos: user\n    };\n    emitNewMessageSocket(messageCopy, receiversIds);\n    updateChatLastMessage(res.data);\n    setMessages([messageCopy, ...messages]);\n    setMessageInput(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ConversationSideBar, {\n        chats: chats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n          chats: chats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessagesList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"3h+lhtuoMrCJuPgeTCCczwZNcko=\", false, function () {\n  return [useParams];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/ChatApp.tsx"],"names":["axios","React","useEffect","useState","io","ConversationSideBar","UserContext","MessagesList","ChatInput","useParams","ChatHeader","App","user","setUser","messages","setMessages","chats","setChats","currentChatParamsId","chatId","userJson","localStorage","getItem","JSON","parse","socket","setSocket","emit","_id","on","message","prev","emitNewMessageSocket","receiversIds","updateChatLastMessage","sortMessages","data","sort","m1","m2","Date","createdAt","valueOf","getChats","res","get","getMessages","sendMessage","messageInput","setMessageInput","post","content","userID","conversationID","currentConversation","find","conversation","membersIds","membersInfos","map","member","filter","id","others","messageCopy","userInfos"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io, { Socket } from \"socket.io-client\";\nimport ConversationSideBar from \"./components/sideBarConversationsList/SideBarConversationsList\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./chatApp.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\nimport { useParams } from \"react-router-dom\";\nimport ChatHeader from \"./components/chat/chatHeader/ChatHeader\";\n\nexport type User = {\n  _id: string;\n  username: string;\n  email: string;\n  profilePicture: string;\n  createdAt: string;\n  updatedAt: string;\n};\nexport type Message = {\n  _id: string;\n  content: string;\n  userInfos: User;\n  conversationID: string;\n  createdAt: string;\n  updatedAt: string;\n};\nexport interface Conversation {\n  _id: string;\n  createdAt: string;\n  updatedAt: string;\n  membersInfos: User[];\n  lastMessage: Message;\n}\n\nconst App = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [chats, setChats] = useState<Conversation[]>([]);\n  const currentChatParamsId = useParams().chatId;\n\n  //GET USER\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []);\n\n  //WEB SOCKET\n  const [socket, setSocket] = useState<Socket | null>(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n  useEffect(() => {\n    socket?.emit(\"newUser\", user?._id);\n  }, [socket, user]);\n  useEffect(() => {\n    socket?.on(\"newMessage\", (message) => {\n      setMessages((prev) => [...prev, message]);\n    });\n  }, [socket]);\n\n  const emitNewMessageSocket = (message: Message, receiversIds: string[]) => {\n    socket?.emit(\"newMessage\", {\n      message,\n      receiversIds,\n    });\n  };\n\n  const updateChatLastMessage = (message: Message) => {\n    // if (!currentConversation) return;\n    // console.log({ ...currentConversation, lastMessage: message });\n    // setCurrentConversation({ ...currentConversation, lastMessage: message });\n  };\n\n  const sortMessages = (data: Message[]) => {\n    setMessages(\n      data.sort((m1: Message, m2: Message) => {\n        return (\n          new Date(m2.createdAt).valueOf() - new Date(m1.createdAt).valueOf()\n        );\n      })\n    );\n  };\n\n  //GET CONVERSATIONS\n  useEffect(() => {\n    const getChats = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/conversations/${user?._id}`\n      );\n      setChats(res.data);\n    };\n    getChats();\n  }, [user]);\n\n  //GET MESSAGES\n  useEffect(() => {\n    if (!currentChatParamsId) return;\n    const getMessages = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/messages/${currentChatParamsId}`\n      );\n      sortMessages(res.data);\n    };\n    getMessages();\n  }, [currentChatParamsId]);\n\n  //SEND MESSAGE\n  const sendMessage = async ({\n    messageInput,\n    setMessageInput,\n  }: {\n    messageInput: string;\n    setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  }) => {\n    if (messageInput === \"\" || !user) return;\n    const res = await axios.post(\n      `http://localhost:5050/api/messages/${currentChatParamsId}`,\n      {\n        content: messageInput,\n        userID: user._id,\n        conversationID: currentChatParamsId,\n      }\n    );\n    const currentConversation = chats.find(\n      (conversation) => conversation._id === currentChatParamsId\n    );\n    if (!currentConversation) return;\n    const membersIds = currentConversation.membersInfos.map(\n      (member) => member._id\n    );\n    const receiversIds = membersIds.filter((id) => id !== user._id);\n    const { userID, ...others } = res.data;\n    const messageCopy = {\n      ...others,\n      userInfos: user,\n    };\n    emitNewMessageSocket(messageCopy, receiversIds);\n    updateChatLastMessage(res.data);\n    setMessages([messageCopy, ...messages]);\n    setMessageInput(\"\");\n  };\n\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <div className=\"container\">\n        <ConversationSideBar chats={chats} />\n        <div className=\"chat-box\">\n          <ChatHeader chats={chats} />\n          <MessagesList messages={messages} />\n          <ChatInput sendMessage={sendMessage} />\n        </div>\n      </div>\n    </UserContext.Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}