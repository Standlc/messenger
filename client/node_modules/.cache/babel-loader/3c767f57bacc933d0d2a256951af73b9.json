{"ast":null,"code":"import axios from \"axios\";\nexport const sendMessage = async _ref => {\n  let {\n    messageInput,\n    setMessageInput,\n    chats,\n    user,\n    currentChatId\n  } = _ref;\n  if (messageInput === \"\" || !user) return;\n  const res = await axios.post(`http://localhost:5050/api/messages/${currentChatId}`, {\n    content: messageInput,\n    userId: user._id,\n    chatId: currentChatId\n  });\n  const chatsCopy = [...chats];\n  const currentChat = chatsCopy.find(chat => chat._id === currentChatId);\n  if (!currentChat) return;\n  const membersIds = currentChat.membersInfos.map(member => member._id);\n  const receiversIds = membersIds.filter(id => id !== user._id);\n  const {\n    userId,\n    ...others\n  } = res.data;\n  const messageCopy = { ...others,\n    userInfos: user\n  }; // emitNewMessageSocket(messageCopy, receiversIds);\n  // updateCurrentChatLastMessage(messageCopy, currentChat, chatsCopy);\n  // setMessages([messageCopy, ...messages]);\n\n  setMessageInput(\"\");\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/sendMessage.tsx"],"names":["axios","sendMessage","messageInput","setMessageInput","chats","user","currentChatId","res","post","content","userId","_id","chatId","chatsCopy","currentChat","find","chat","membersIds","membersInfos","map","member","receiversIds","filter","id","others","data","messageCopy","userInfos"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,WAAW,GAAG,cAYrB;AAAA,MAZ4B;AAChCC,IAAAA,YADgC;AAEhCC,IAAAA,eAFgC;AAGhCC,IAAAA,KAHgC;AAIhCC,IAAAA,IAJgC;AAKhCC,IAAAA;AALgC,GAY5B;AACJ,MAAIJ,YAAY,KAAK,EAAjB,IAAuB,CAACG,IAA5B,EAAkC;AAClC,QAAME,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAN,CACf,sCAAqCF,aAAc,EADpC,EAEhB;AACEG,IAAAA,OAAO,EAAEP,YADX;AAEEQ,IAAAA,MAAM,EAAEL,IAAI,CAACM,GAFf;AAGEC,IAAAA,MAAM,EAAEN;AAHV,GAFgB,CAAlB;AAQA,QAAMO,SAAS,GAAG,CAAC,GAAGT,KAAJ,CAAlB;AACA,QAAMU,WAAW,GAAGD,SAAS,CAACE,IAAV,CAAgBC,IAAD,IAAUA,IAAI,CAACL,GAAL,KAAaL,aAAtC,CAApB;AACA,MAAI,CAACQ,WAAL,EAAkB;AAClB,QAAMG,UAAU,GAAGH,WAAW,CAACI,YAAZ,CAAyBC,GAAzB,CAA8BC,MAAD,IAAYA,MAAM,CAACT,GAAhD,CAAnB;AACA,QAAMU,YAAY,GAAGJ,UAAU,CAACK,MAAX,CAAmBC,EAAD,IAAQA,EAAE,KAAKlB,IAAI,CAACM,GAAtC,CAArB;AACA,QAAM;AAAED,IAAAA,MAAF;AAAU,OAAGc;AAAb,MAAwBjB,GAAG,CAACkB,IAAlC;AACA,QAAMC,WAAW,GAAG,EAClB,GAAGF,MADe;AAElBG,IAAAA,SAAS,EAAEtB;AAFO,GAApB,CAhBI,CAoBJ;AACA;AACA;;AACAF,EAAAA,eAAe,CAAC,EAAD,CAAf;AACD,CApCM","sourcesContent":["import axios from \"axios\";\nimport { Chat, User } from \"../../../types\";\n\nexport const sendMessage = async ({\n  messageInput,\n  setMessageInput,\n  chats,\n  user,\n  currentChatId,\n}: {\n  messageInput: string;\n  setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  chats: Chat[];\n  user: User;\n  currentChatId: string;\n}) => {\n  if (messageInput === \"\" || !user) return;\n  const res = await axios.post(\n    `http://localhost:5050/api/messages/${currentChatId}`,\n    {\n      content: messageInput,\n      userId: user._id,\n      chatId: currentChatId,\n    }\n  );\n  const chatsCopy = [...chats];\n  const currentChat = chatsCopy.find((chat) => chat._id === currentChatId);\n  if (!currentChat) return;\n  const membersIds = currentChat.membersInfos.map((member) => member._id);\n  const receiversIds = membersIds.filter((id) => id !== user._id);\n  const { userId, ...others } = res.data;\n  const messageCopy = {\n    ...others,\n    userInfos: user,\n  };\n  // emitNewMessageSocket(messageCopy, receiversIds);\n  // updateCurrentChatLastMessage(messageCopy, currentChat, chatsCopy);\n  // setMessages([messageCopy, ...messages]);\n  setMessageInput(\"\");\n};\n"]},"metadata":{},"sourceType":"module"}