{"ast":null,"code":"import moment from \"moment\";\nexport const isMessageClose = _ref => {\n  var _messages$i;\n\n  let {\n    order,\n    messages,\n    i\n  } = _ref;\n  const neighborMessage = order === \"next\" ? messages[i + 1] : messages[i - 1];\n  const neighborMessageTime = order === \"next\" ? neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.createdAt : neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.createdAt;\n  const currentMessageTime = messages[i].createdAt;\n  const isNeighborMessageOwn = (neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.userInfos._id) === ((_messages$i = messages[i]) === null || _messages$i === void 0 ? void 0 : _messages$i.userInfos._id);\n  if (!neighborMessage || !neighborMessageTime || !isNeighborMessageOwn) return false; //   const dateTypes = [\"year\", \"month\", \"day\", \"hour\", \"minute\"];\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: moment(messageCreatedAt).format().substring(0, 4),\n      month: moment(messageCreatedAt).format().substring(5, 7),\n      day: moment(messageCreatedAt).format().substring(8, 10),\n      hour: moment(messageCreatedAt).format().substring(11, 13),\n      minute: moment(messageCreatedAt).format().substring(14, 16)\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\" || dateType === \"minute\";\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  if (order === \"next\") {\n    if (time(currentMessageTime, \"year\") < time(neighborMessageTime, \"year\")) return;\n    if (time(currentMessageTime, \"month\") < time(neighborMessageTime, \"month\")) return;\n    if (time(currentMessageTime, \"day\") < time(neighborMessageTime, \"day\")) return;\n    if (time(currentMessageTime, \"hour\") < time(neighborMessageTime, \"hour\")) return;\n    return !(time(currentMessageTime, \"minute\") < time(neighborMessageTime, \"minute\"));\n  } else {\n    if (time(currentMessageTime, \"year\") < time(neighborMessageTime, \"year\")) return;\n    if (time(currentMessageTime, \"month\") < time(neighborMessageTime, \"month\")) return;\n    if (time(currentMessageTime, \"day\") < time(neighborMessageTime, \"day\")) return;\n    if (time(currentMessageTime, \"hour\") < time(neighborMessageTime, \"hour\")) return;\n    return !(time(currentMessageTime, \"minute\") < time(neighborMessageTime, \"minute\"));\n  }\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx"],"names":["moment","isMessageClose","order","messages","i","neighborMessage","neighborMessageTime","createdAt","currentMessageTime","isNeighborMessageOwn","userInfos","_id","time","messageCreatedAt","dateType","table","year","format","substring","month","day","hour","minute","isValidDateType"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport { Message } from \"../../../ChatApp\";\n\nexport const isMessageClose = ({\n  order,\n  messages,\n  i,\n}: {\n  order: string;\n  messages: Message[];\n  i: number;\n}) => {\n  const neighborMessage = order === \"next\" ? messages[i + 1] : messages[i - 1];\n  const neighborMessageTime =\n    order === \"next\" ? neighborMessage?.createdAt : neighborMessage?.createdAt;\n  const currentMessageTime = messages[i].createdAt;\n  const isNeighborMessageOwn =\n    neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n\n  if (!neighborMessage || !neighborMessageTime || !isNeighborMessageOwn)\n    return false;\n  //   const dateTypes = [\"year\", \"month\", \"day\", \"hour\", \"minute\"];\n\n  const time = (messageCreatedAt: Date, dateType: string) => {\n    const table = {\n      year: moment(messageCreatedAt).format().substring(0, 4),\n      month: moment(messageCreatedAt).format().substring(5, 7),\n      day: moment(messageCreatedAt).format().substring(8, 10),\n      hour: moment(messageCreatedAt).format().substring(11, 13),\n      minute: moment(messageCreatedAt).format().substring(14, 16),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\" ||\n      dateType === \"minute\";\n\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  if (order === \"next\") {\n    if (time(currentMessageTime, \"year\") < time(neighborMessageTime, \"year\"))\n      return;\n\n    if (time(currentMessageTime, \"month\") < time(neighborMessageTime, \"month\"))\n      return;\n\n    if (time(currentMessageTime, \"day\") < time(neighborMessageTime, \"day\"))\n      return;\n\n    if (time(currentMessageTime, \"hour\") < time(neighborMessageTime, \"hour\"))\n      return;\n\n    return !(\n      time(currentMessageTime, \"minute\") < time(neighborMessageTime, \"minute\")\n    );\n  } else {\n    if (time(currentMessageTime, \"year\") < time(neighborMessageTime, \"year\"))\n      return;\n\n    if (time(currentMessageTime, \"month\") < time(neighborMessageTime, \"month\"))\n      return;\n\n    if (time(currentMessageTime, \"day\") < time(neighborMessageTime, \"day\"))\n      return;\n\n    if (time(currentMessageTime, \"hour\") < time(neighborMessageTime, \"hour\"))\n      return;\n\n    return !(\n      time(currentMessageTime, \"minute\") < time(neighborMessageTime, \"minute\")\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}