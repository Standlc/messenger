{"ast":null,"code":"export const groupChatMessage = _ref => {\n  let {\n    messages,\n    i,\n    messageRef\n  } = _ref;\n}; // export const hasCloseNeighbor = ({\n//   order,\n//   messages,\n//   i,\n// }: {\n//   order: string;\n//   messages: Message[];\n//   i: number;\n// }) => {\n//   const neighborMessage = order === \"next\" ? messages[i - 1] : messages[i + 1];\n//   const isNeighborOwnMessage =\n//     neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n//   if (!neighborMessage || !isNeighborOwnMessage) return false;\n//   const neighborMessageDate = neighborMessage?.createdAt;\n//   const messageDate = messages[i].createdAt;\n//   const time = (messageCreatedAt: string, dateType: string) => {\n//     const table = {\n//       year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         year: \"2-digit\",\n//       }),\n//       month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         month: \"2-digit\",\n//       }),\n//       day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         day: \"2-digit\",\n//       }),\n//       hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         hour: \"2-digit\",\n//         hourCycle: \"h23\",\n//       }),\n//     };\n//     const isValidDateType =\n//       dateType === \"year\" ||\n//       dateType === \"month\" ||\n//       dateType === \"day\" ||\n//       dateType === \"hour\";\n//     return parseInt(table[isValidDateType ? dateType : \"year\"]);\n//   };\n//   if (order === \"next\") {\n//     if (time(messageDate, \"year\") < time(neighborMessageDate, \"year\")) return;\n//     if (time(messageDate, \"month\") < time(neighborMessageDate, \"month\")) return;\n//     if (time(messageDate, \"day\") < time(neighborMessageDate, \"day\")) return;\n//     return !(time(messageDate, \"hour\") < time(neighborMessageDate, \"hour\"));\n//   } else {\n//     if (time(messageDate, \"year\") > time(neighborMessageDate, \"year\")) return;\n//     if (time(messageDate, \"month\") > time(neighborMessageDate, \"month\")) return;\n//     if (time(messageDate, \"day\") > time(neighborMessageDate, \"day\")) return;\n//     return !(time(messageDate, \"hour\") > time(neighborMessageDate, \"hour\"));\n//   }\n// };","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/isMessageClose.tsx"],"names":["groupChatMessage","messages","i","messageRef"],"mappings":"AAGA,OAAO,MAAMA,gBAAgB,GAAG,QAQ1B;AAAA,MAR2B;AAC/BC,IAAAA,QAD+B;AAE/BC,IAAAA,CAF+B;AAG/BC,IAAAA;AAH+B,GAQ3B;AAAE,CARD,C,CAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA","sourcesContent":["import { Message } from \"../../../../types\";\nimport { DateTime } from \"luxon\";\n\nexport const groupChatMessage = ({\n  messages,\n  i,\n  messageRef,\n}: {\n  messages: Message[];\n  i: number;\n  messageRef: HTMLDivElement;\n}) => {};\n\n// export const hasCloseNeighbor = ({\n//   order,\n//   messages,\n//   i,\n// }: {\n//   order: string;\n//   messages: Message[];\n//   i: number;\n// }) => {\n//   const neighborMessage = order === \"next\" ? messages[i - 1] : messages[i + 1];\n//   const isNeighborOwnMessage =\n//     neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n//   if (!neighborMessage || !isNeighborOwnMessage) return false;\n//   const neighborMessageDate = neighborMessage?.createdAt;\n//   const messageDate = messages[i].createdAt;\n\n//   const time = (messageCreatedAt: string, dateType: string) => {\n//     const table = {\n//       year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         year: \"2-digit\",\n//       }),\n//       month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         month: \"2-digit\",\n//       }),\n//       day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         day: \"2-digit\",\n//       }),\n//       hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n//         hour: \"2-digit\",\n//         hourCycle: \"h23\",\n//       }),\n//     };\n//     const isValidDateType =\n//       dateType === \"year\" ||\n//       dateType === \"month\" ||\n//       dateType === \"day\" ||\n//       dateType === \"hour\";\n\n//     return parseInt(table[isValidDateType ? dateType : \"year\"]);\n//   };\n\n//   if (order === \"next\") {\n//     if (time(messageDate, \"year\") < time(neighborMessageDate, \"year\")) return;\n\n//     if (time(messageDate, \"month\") < time(neighborMessageDate, \"month\")) return;\n\n//     if (time(messageDate, \"day\") < time(neighborMessageDate, \"day\")) return;\n\n//     return !(time(messageDate, \"hour\") < time(neighborMessageDate, \"hour\"));\n//   } else {\n//     if (time(messageDate, \"year\") > time(neighborMessageDate, \"year\")) return;\n\n//     if (time(messageDate, \"month\") > time(neighborMessageDate, \"month\")) return;\n\n//     if (time(messageDate, \"day\") > time(neighborMessageDate, \"day\")) return;\n\n//     return !(time(messageDate, \"hour\") > time(neighborMessageDate, \"hour\"));\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}