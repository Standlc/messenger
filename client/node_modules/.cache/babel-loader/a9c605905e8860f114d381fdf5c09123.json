{"ast":null,"code":"export const hasCloseNeighbor = _ref => {\n  var _messages$i;\n\n  let {\n    order,\n    messages,\n    i\n  } = _ref;\n  const neighborMessage = order === \"next\" ? messages[i + 1] : messages[i - 1];\n  const isNeighborOwnMessage = (neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.userInfos._id) === ((_messages$i = messages[i]) === null || _messages$i === void 0 ? void 0 : _messages$i.userInfos._id);\n  if (!neighborMessage || !isNeighborOwnMessage) return false;\n  const neighborMessageDate = order === \"next\" ? neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.createdAt : neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.createdAt;\n  const messageDate = messages[i].createdAt;\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: moment(messageCreatedAt).format().substring(0, 4),\n      month: moment(messageCreatedAt).format().substring(5, 7),\n      day: moment(messageCreatedAt).format().substring(8, 10),\n      hour: moment(messageCreatedAt).format().substring(11, 13),\n      minute: moment(messageCreatedAt).format().substring(14, 16)\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\" || dateType === \"minute\";\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  if (order === \"next\") {\n    if (time(messageDate, \"year\") < time(neighborMessageTime, \"year\")) return;\n    if (time(messageDate, \"month\") < time(neighborMessageTime, \"month\")) return;\n    if (time(messageDate, \"day\") < time(neighborMessageTime, \"day\")) return;\n    if (time(messageDate, \"hour\") < time(neighborMessageTime, \"hour\")) return;\n    return !(time(messageDate, \"minute\") < time(neighborMessageTime, \"minute\"));\n  } else {\n    if (time(messageDate, \"year\") > time(neighborMessageTime, \"year\")) return;\n    if (time(messageDate, \"month\") > time(neighborMessageTime, \"month\")) return;\n    if (time(messageDate, \"day\") > time(neighborMessageTime, \"day\")) return;\n    if (time(messageDate, \"hour\") > time(neighborMessageTime, \"hour\")) return;\n    return !(time(messageDate, \"minute\") > time(neighborMessageTime, \"minute\"));\n  }\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx"],"names":["hasCloseNeighbor","order","messages","i","neighborMessage","isNeighborOwnMessage","userInfos","_id","neighborMessageDate","createdAt","messageDate","time","messageCreatedAt","dateType","table","year","moment","format","substring","month","day","hour","minute","isValidDateType","neighborMessageTime"],"mappings":"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","sourcesContent":["import { Message } from \"../../../ChatApp\";\nimport { format } from \"timeago.js\";\n\nexport const hasCloseNeighbor = ({\n  order,\n  messages,\n  i,\n}: {\n  order: string;\n  messages: Message[];\n  i: number;\n}) => {\n  const neighborMessage = order === \"next\" ? messages[i + 1] : messages[i - 1];\n\n  const isNeighborOwnMessage =\n    neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n\n  if (!neighborMessage || !isNeighborOwnMessage) return false;\n\n  const neighborMessageDate =\n    order === \"next\" ? neighborMessage?.createdAt : neighborMessage?.createdAt;\n\n  const messageDate = messages[i].createdAt;\n\n  const time = (messageCreatedAt: Date, dateType: string) => {\n    const table = {\n      year: moment(messageCreatedAt).format().substring(0, 4),\n      month: moment(messageCreatedAt).format().substring(5, 7),\n      day: moment(messageCreatedAt).format().substring(8, 10),\n      hour: moment(messageCreatedAt).format().substring(11, 13),\n      minute: moment(messageCreatedAt).format().substring(14, 16),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\" ||\n      dateType === \"minute\";\n\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  if (order === \"next\") {\n    if (time(messageDate, \"year\") < time(neighborMessageTime, \"year\")) return;\n\n    if (time(messageDate, \"month\") < time(neighborMessageTime, \"month\")) return;\n\n    if (time(messageDate, \"day\") < time(neighborMessageTime, \"day\")) return;\n\n    if (time(messageDate, \"hour\") < time(neighborMessageTime, \"hour\")) return;\n\n    return !(time(messageDate, \"minute\") < time(neighborMessageTime, \"minute\"));\n  } else {\n    if (time(messageDate, \"year\") > time(neighborMessageTime, \"year\")) return;\n\n    if (time(messageDate, \"month\") > time(neighborMessageTime, \"month\")) return;\n\n    if (time(messageDate, \"day\") > time(neighborMessageTime, \"day\")) return;\n\n    if (time(messageDate, \"hour\") > time(neighborMessageTime, \"hour\")) return;\n\n    return !(time(messageDate, \"minute\") > time(neighborMessageTime, \"minute\"));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}