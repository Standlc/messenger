{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\"; // import moment from \"moment\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // useEffect(() => {\n  //   localStorage.setItem(\n  //     \"user\",\n  //     JSON.stringify({\n  //       _id: \"6214bf8be824cba2c81db0dd\",\n  //       username: \"second\",\n  //       email: \"secondEmail\",\n  //       createdAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       updatedAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       __v: 0,\n  //     })\n  //   );\n  // }, []);\n  const [user, setUser] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []); //WEB SOCKET\n\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newUser\", user === null || user === void 0 ? void 0 : user._id);\n  }, [socket, user]);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", message => {\n      setMessages(prev => [...prev, message]);\n    });\n  }, [socket]);\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(`http://localhost:5050/api/conversations/${user === null || user === void 0 ? void 0 : user._id}`);\n      setConversations(res.data);\n    };\n\n    getConversations();\n  }, [user]);\n  useEffect(() => {\n    const getMessages = async () => {\n      const res = await axios.get(`http://localhost:5050/api/messages/${selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id}`);\n      setMessages(res.data);\n    };\n\n    getMessages();\n  }, [selectedConversation]);\n\n  const sendMessage = async () => {\n    if (message === \"\" || !selectedConversation || !user) return;\n    const res = await axios.post(`http://localhost:5050/api/messages/${selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id}`, {\n      content: message,\n      userID: user._id,\n      conversationID: selectedConversation._id\n    });\n    const membersIds = selectedConversation.membersInfos.map(member => member._id);\n    const receiversIds = membersIds.filter(id => id !== user._id);\n    const {\n      userID,\n      ...others\n    } = res.data;\n    const messageCopy = { ...others,\n      userInfos: user\n    };\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newMessage\", {\n      message: messageCopy,\n      receiversIds: receiversIds\n    });\n    setMessages([...messages, messageCopy]);\n    setMessage(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginRight: \"100px\"\n      },\n      children: conversations.map(conversation => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: conversation.membersInfos.map(member => {\n            return member._id !== (user === null || user === void 0 ? void 0 : user._id) && /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => setSelectedConversation(conversation),\n              children: member.username\n            }, member._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 21\n            }, this);\n          })\n        }, conversation._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [messages.map(message => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: message.userInfos._id === (user === null || user === void 0 ? void 0 : user._id) ? {\n            backgroundColor: \"green\"\n          } : {\n            backgroundColor: \"blue\"\n          },\n          children: message.content\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"your message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"1xorQuSpkPKv3z3WrBSI9kUtt8I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/App.tsx"],"names":["axios","React","useEffect","useState","io","App","user","setUser","messages","setMessages","message","setMessage","conversations","setConversations","selectedConversation","setSelectedConversation","userJson","localStorage","getItem","JSON","parse","socket","setSocket","emit","_id","on","prev","getConversations","res","get","data","getMessages","sendMessage","post","content","userID","conversationID","membersIds","membersInfos","map","member","receiversIds","filter","id","others","messageCopy","userInfos","display","marginRight","conversation","username","backgroundColor","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAA2B,kBAA3B,C,CACA;;;;AA6BA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,EAAhC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAY,EAAZ,CAAxC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAiB,EAAjB,CAAlD;AACA,QAAM,CAACW,oBAAD,EAAuBC,uBAAvB,IACJZ,QAAQ,EADV;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAjB;AACAF,IAAAA,QAAQ,IAAIT,OAAO,CAACY,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAD,CAAnB;AACD,GAHQ,EAGN,EAHM,CAAT,CAtBgB,CA2BhB;;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAgB,IAAhB,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,SAAS,CAAClB,EAAE,CAAC,uBAAD,CAAH,CAAT;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEE,IAAR,CAAa,SAAb,EAAwBjB,IAAxB,aAAwBA,IAAxB,uBAAwBA,IAAI,CAAEkB,GAA9B;AACD,GAFQ,EAEN,CAACH,MAAD,EAASf,IAAT,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEI,EAAR,CAAW,YAAX,EAA0Bf,OAAD,IAAa;AACpCD,MAAAA,WAAW,CAAEiB,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUhB,OAAV,CAAX,CAAX;AACD,KAFD;AAGD,GAJQ,EAIN,CAACW,MAAD,CAJM,CAAT;AAMAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,gBAAgB,GAAG,YAAY;AACnC,YAAMC,GAAG,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CACf,2CAA0CvB,IAA3C,aAA2CA,IAA3C,uBAA2CA,IAAI,CAAEkB,GAAI,EADrC,CAAlB;AAGAX,MAAAA,gBAAgB,CAACe,GAAG,CAACE,IAAL,CAAhB;AACD,KALD;;AAMAH,IAAAA,gBAAgB;AACjB,GARQ,EAQN,CAACrB,IAAD,CARM,CAAT;AAUAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,WAAW,GAAG,YAAY;AAC9B,YAAMH,GAAG,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CACf,sCAAqCf,oBAAtC,aAAsCA,oBAAtC,uBAAsCA,oBAAoB,CAAEU,GAAI,EADhD,CAAlB;AAGAf,MAAAA,WAAW,CAACmB,GAAG,CAACE,IAAL,CAAX;AACD,KALD;;AAMAC,IAAAA,WAAW;AACZ,GARQ,EAQN,CAACjB,oBAAD,CARM,CAAT;;AAUA,QAAMkB,WAAW,GAAG,YAAY;AAC9B,QAAItB,OAAO,KAAK,EAAZ,IAAkB,CAACI,oBAAnB,IAA2C,CAACR,IAAhD,EAAsD;AACtD,UAAMsB,GAAG,GAAG,MAAM5B,KAAK,CAACiC,IAAN,CACf,sCAAqCnB,oBAAtC,aAAsCA,oBAAtC,uBAAsCA,oBAAoB,CAAEU,GAAI,EADhD,EAEhB;AACEU,MAAAA,OAAO,EAAExB,OADX;AAEEyB,MAAAA,MAAM,EAAE7B,IAAI,CAACkB,GAFf;AAGEY,MAAAA,cAAc,EAAEtB,oBAAoB,CAACU;AAHvC,KAFgB,CAAlB;AAQA,UAAMa,UAAU,GAAGvB,oBAAoB,CAACwB,YAArB,CAAkCC,GAAlC,CAChBC,MAAD,IAAYA,MAAM,CAAChB,GADF,CAAnB;AAGA,UAAMiB,YAAY,GAAGJ,UAAU,CAACK,MAAX,CAAmBC,EAAD,IAAQA,EAAE,KAAKrC,IAAI,CAACkB,GAAtC,CAArB;AACA,UAAM;AAAEW,MAAAA,MAAF;AAAU,SAAGS;AAAb,QAAwBhB,GAAG,CAACE,IAAlC;AACA,UAAMe,WAAW,GAAG,EAClB,GAAGD,MADe;AAElBE,MAAAA,SAAS,EAAExC;AAFO,KAApB;AAIAe,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEE,IAAR,CAAa,YAAb,EAA2B;AACzBb,MAAAA,OAAO,EAAEmC,WADgB;AAEzBJ,MAAAA,YAAY,EAAEA;AAFW,KAA3B;AAIAhC,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcqC,WAAd,CAAD,CAAX;AACAlC,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAzBD;;AA2BA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEoC,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA,4BACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAAZ;AAAA,gBACGpC,aAAa,CAAC2B,GAAd,CAAmBU,YAAD,IAAkB;AACnC,4BACE;AAAA,oBACGA,YAAY,CAACX,YAAb,CAA0BC,GAA1B,CAA+BC,MAAD,IAAY;AACzC,mBACEA,MAAM,CAAChB,GAAP,MAAelB,IAAf,aAAeA,IAAf,uBAAeA,IAAI,CAAEkB,GAArB,kBACE;AACE,cAAA,OAAO,EAAE,MAAMT,uBAAuB,CAACkC,YAAD,CADxC;AAAA,wBAIGT,MAAM,CAACU;AAJV,eAEOV,MAAM,CAAChB,GAFd;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAUD,WAXA;AADH,WAAUyB,YAAY,CAACzB,GAAvB;AAAA;AAAA;AAAA;AAAA,gBADF;AAgBD,OAjBA;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAqBE;AAAA,iBACGhB,QAAQ,CAAC+B,GAAT,CAAc7B,OAAD,IAAa;AACzB,4BACE;AAEE,UAAA,KAAK,EACHA,OAAO,CAACoC,SAAR,CAAkBtB,GAAlB,MAA0BlB,IAA1B,aAA0BA,IAA1B,uBAA0BA,IAAI,CAAEkB,GAAhC,IACI;AAAE2B,YAAAA,eAAe,EAAE;AAAnB,WADJ,GAEI;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WALR;AAAA,oBAQGzC,OAAO,CAACwB;AARX,WACOxB,OAAO,CAACc,GADf;AAAA;AAAA;AAAA;AAAA,gBADF;AAYD,OAbA,CADH,eAeE;AACE,QAAA,KAAK,EAAEd,OADT;AAEE,QAAA,QAAQ,EAAG0C,CAAD,IAAOzC,UAAU,CAACyC,CAAC,CAACC,MAAF,CAASC,KAAV,CAF7B;AAGE,QAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,cAfF,eAoBE;AAAQ,QAAA,OAAO,EAAEtB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD,CAxID;;GAAM3B,G;;KAAAA,G;AA0IN,eAAeA,GAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io, { Socket } from \"socket.io-client\";\n// import moment from \"moment\";\n\ntype User = {\n  _id: \"\";\n  username: \"\";\n  email: \"\";\n  createdAt: Date;\n  updatedAt: Date;\n  __v: 0;\n};\n\ntype Conversation = {\n  _id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  __v: number;\n  membersInfos: User[];\n};\n\ntype Message = {\n  _id: string;\n  content: string;\n  userInfos: User;\n  conversationID: string;\n  createdAt: Date;\n  updatedAt: Date;\n  __v: number;\n};\n\nconst App = () => {\n  // useEffect(() => {\n  //   localStorage.setItem(\n  //     \"user\",\n  //     JSON.stringify({\n  //       _id: \"6214bf8be824cba2c81db0dd\",\n  //       username: \"second\",\n  //       email: \"secondEmail\",\n  //       createdAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       updatedAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       __v: 0,\n  //     })\n  //   );\n  // }, []);\n\n  const [user, setUser] = useState<User>();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [message, setMessage] = useState<string>(\"\");\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [selectedConversation, setSelectedConversation] =\n    useState<Conversation>();\n\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []);\n\n  //WEB SOCKET\n  const [socket, setSocket] = useState<Socket | null>(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n\n  useEffect(() => {\n    socket?.emit(\"newUser\", user?._id);\n  }, [socket, user]);\n\n  useEffect(() => {\n    socket?.on(\"newMessage\", (message) => {\n      setMessages((prev) => [...prev, message]);\n    });\n  }, [socket]);\n\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/conversations/${user?._id}`\n      );\n      setConversations(res.data);\n    };\n    getConversations();\n  }, [user]);\n\n  useEffect(() => {\n    const getMessages = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/messages/${selectedConversation?._id}`\n      );\n      setMessages(res.data);\n    };\n    getMessages();\n  }, [selectedConversation]);\n\n  const sendMessage = async () => {\n    if (message === \"\" || !selectedConversation || !user) return;\n    const res = await axios.post(\n      `http://localhost:5050/api/messages/${selectedConversation?._id}`,\n      {\n        content: message,\n        userID: user._id,\n        conversationID: selectedConversation._id,\n      }\n    );\n    const membersIds = selectedConversation.membersInfos.map(\n      (member) => member._id\n    );\n    const receiversIds = membersIds.filter((id) => id !== user._id);\n    const { userID, ...others } = res.data;\n    const messageCopy = {\n      ...others,\n      userInfos: user,\n    };\n    socket?.emit(\"newMessage\", {\n      message: messageCopy,\n      receiversIds: receiversIds,\n    });\n    setMessages([...messages, messageCopy]);\n    setMessage(\"\");\n  };\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div style={{ marginRight: \"100px\" }}>\n        {conversations.map((conversation) => {\n          return (\n            <div key={conversation._id}>\n              {conversation.membersInfos.map((member) => {\n                return (\n                  member._id !== user?._id && (\n                    <div\n                      onClick={() => setSelectedConversation(conversation)}\n                      key={member._id}\n                    >\n                      {member.username}\n                    </div>\n                  )\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n      <div>\n        {messages.map((message) => {\n          return (\n            <div\n              key={message._id}\n              style={\n                message.userInfos._id === user?._id\n                  ? { backgroundColor: \"green\" }\n                  : { backgroundColor: \"blue\" }\n              }\n            >\n              {message.content}\n            </div>\n          );\n        })}\n        <input\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"your message\"\n        ></input>\n        <button onClick={sendMessage}>SEND</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}