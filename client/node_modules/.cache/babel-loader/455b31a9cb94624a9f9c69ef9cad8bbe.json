{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/ChatApp.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport ChatSideBar from \"./components/sideBarChatsList/ChatSideBar\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./chatApp.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\nimport { useParams } from \"react-router-dom\";\nimport ChatHeader from \"./components/chat/chatHeader/ChatHeader\";\nimport { ChatsContext } from \"./contexts/ChatsProvider\";\nimport { sortedChatsByLastMessage } from \"./sortedChats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [chats, setChats] = useState([]);\n  const currentChatParamsId = useParams().chatId; //GET USER\n\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []); //WEB SOCKET\n\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newUser\", user === null || user === void 0 ? void 0 : user._id);\n  }, [socket, user]);\n  useEffect(() => {\n    const handler = message => {\n      setMessages(prev => [message, ...prev]); // const chatsCopy = [...chats];\n      // const currentChat = chats.find(\n      //   (chat) => chat._id === currentChatParamsId\n      // );\n      // updateCurrentChatLastMessage(message, currentChat, chats);\n    };\n\n    socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", handler);\n    return () => {\n      socket === null || socket === void 0 ? void 0 : socket.off(\"newMessage\", handler);\n    };\n  }, [socket, chats]);\n\n  const emitNewMessageSocket = (message, receiversIds) => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newMessage\", {\n      message,\n      receiversIds\n    });\n  };\n\n  const updateCurrentChatLastMessage = (message, currentChat, chatsCopy) => {\n    if (!currentChat) return; // currentChat.lastMessage = message;\n    // setChats([...chatsCopy, ...chats]);\n  }; //GET CHATS\n\n\n  useEffect(() => {\n    const getChats = async () => {\n      const res = await axios.get(`http://localhost:5050/api/chats/${user === null || user === void 0 ? void 0 : user._id}`);\n      setChats(sortedChatsByLastMessage({\n        chats: res.data\n      }));\n    };\n\n    getChats();\n  }, [user]); //SEND MESSAGE\n\n  const sendMessage = async _ref => {\n    let {\n      messageInput,\n      setMessageInput\n    } = _ref;\n    if (messageInput === \"\" || !user) return;\n    const res = await axios.post(`http://localhost:5050/api/messages/${currentChatParamsId}`, {\n      content: messageInput,\n      userId: user._id,\n      chatId: currentChatParamsId\n    });\n    const chatsCopy = [...chats];\n    const currentChat = chatsCopy.find(chat => chat._id === currentChatParamsId);\n    if (!currentChat) return;\n    const membersIds = currentChat.membersInfos.map(member => member._id);\n    const receiversIds = membersIds.filter(id => id !== user._id);\n    const {\n      userId,\n      ...others\n    } = res.data;\n    const messageCopy = { ...others,\n      userInfos: user\n    };\n    emitNewMessageSocket(messageCopy, receiversIds);\n    updateCurrentChatLastMessage(messageCopy, currentChat, chatsCopy);\n    setMessages([messageCopy, ...messages]);\n    setMessageInput(\"\");\n    setChats(sortedChatsByLastMessage({\n      chats: chatsCopy\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: /*#__PURE__*/_jsxDEV(ChatsContext.Provider, {\n      value: {\n        chats,\n        setChats\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(ChatSideBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-box\",\n          children: [/*#__PURE__*/_jsxDEV(ChatHeader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessagesList, {\n            messages: messages,\n            setMessages: setMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n            sendMessage: sendMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"sSMg8IZ6OPaA0+veEdFhqAsQ1Fw=\", false, function () {\n  return [useParams];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/ChatApp.tsx"],"names":["axios","React","useEffect","useState","io","ChatSideBar","UserContext","MessagesList","ChatInput","useParams","ChatHeader","ChatsContext","sortedChatsByLastMessage","App","user","setUser","messages","setMessages","chats","setChats","currentChatParamsId","chatId","userJson","localStorage","getItem","JSON","parse","socket","setSocket","emit","_id","handler","message","prev","on","off","emitNewMessageSocket","receiversIds","updateCurrentChatLastMessage","currentChat","chatsCopy","getChats","res","get","data","sendMessage","messageInput","setMessageInput","post","content","userId","find","chat","membersIds","membersInfos","map","member","filter","id","others","messageCopy","userInfos"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io, { Socket } from \"socket.io-client\";\nimport ChatSideBar from \"./components/sideBarChatsList/ChatSideBar\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./chatApp.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\nimport { useParams } from \"react-router-dom\";\nimport ChatHeader from \"./components/chat/chatHeader/ChatHeader\";\nimport { Chat, Message, User } from \"./types\";\nimport { ChatsContext } from \"./contexts/ChatsProvider\";\nimport { sortedChatsByLastMessage } from \"./sortedChats\";\n\nconst App = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [chats, setChats] = useState<Chat[]>([]);\n  const currentChatParamsId = useParams().chatId;\n\n  //GET USER\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []);\n\n  //WEB SOCKET\n  const [socket, setSocket] = useState<Socket | null>(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n\n  useEffect(() => {\n    socket?.emit(\"newUser\", user?._id);\n  }, [socket, user]);\n\n  useEffect(() => {\n    const handler = (message: any) => {\n      setMessages((prev) => [message, ...prev]);\n      // const chatsCopy = [...chats];\n      // const currentChat = chats.find(\n      //   (chat) => chat._id === currentChatParamsId\n      // );\n      // updateCurrentChatLastMessage(message, currentChat, chats);\n    };\n    socket?.on(\"newMessage\", handler);\n    return () => {\n      socket?.off(\"newMessage\", handler);\n    };\n  }, [socket, chats]);\n\n  const emitNewMessageSocket = (message: Message, receiversIds: string[]) => {\n    socket?.emit(\"newMessage\", {\n      message,\n      receiversIds,\n    });\n  };\n\n  const updateCurrentChatLastMessage = (\n    message: Message,\n    currentChat: Chat | undefined,\n    chatsCopy: Chat[]\n  ) => {\n    if (!currentChat) return;\n    // currentChat.lastMessage = message;\n    // setChats([...chatsCopy, ...chats]);\n  };\n\n  //GET CHATS\n  useEffect(() => {\n    const getChats = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/chats/${user?._id}`\n      );\n      setChats(sortedChatsByLastMessage({ chats: res.data }));\n    };\n    getChats();\n  }, [user]);\n\n  //SEND MESSAGE\n  const sendMessage = async ({\n    messageInput,\n    setMessageInput,\n  }: {\n    messageInput: string;\n    setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  }) => {\n    if (messageInput === \"\" || !user) return;\n    const res = await axios.post(\n      `http://localhost:5050/api/messages/${currentChatParamsId}`,\n      {\n        content: messageInput,\n        userId: user._id,\n        chatId: currentChatParamsId,\n      }\n    );\n    const chatsCopy = [...chats];\n    const currentChat = chatsCopy.find(\n      (chat) => chat._id === currentChatParamsId\n    );\n    if (!currentChat) return;\n    const membersIds = currentChat.membersInfos.map((member) => member._id);\n    const receiversIds = membersIds.filter((id) => id !== user._id);\n    const { userId, ...others } = res.data;\n    const messageCopy = {\n      ...others,\n      userInfos: user,\n    };\n    emitNewMessageSocket(messageCopy, receiversIds);\n    updateCurrentChatLastMessage(messageCopy, currentChat, chatsCopy);\n    setMessages([messageCopy, ...messages]);\n    setMessageInput(\"\");\n    setChats(sortedChatsByLastMessage({ chats: chatsCopy }));\n  };\n\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <ChatsContext.Provider value={{ chats, setChats }}>\n        <div className=\"container\">\n          <ChatSideBar />\n          <div className=\"chat-box\">\n            <ChatHeader />\n            <MessagesList messages={messages} setMessages={setMessages} />\n            <ChatInput sendMessage={sendMessage} />\n          </div>\n        </div>\n      </ChatsContext.Provider>\n    </UserContext.Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}