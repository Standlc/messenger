{"ast":null,"code":"import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ChatsContext } from \"../../../contexts/ChatsProvider\";\nimport { UserContext } from \"../../../contexts/UserProvider\";\nconst {\n  user\n} = useContext(UserContext);\nconst {\n  chats\n} = useContext(ChatsContext);\nconst currentChatParamsId = useParams().chatId;\nexport const sendMessage = async _ref => {\n  let {\n    messageInput,\n    setMessageInput\n  } = _ref;\n  if (messageInput === \"\" || !user) return;\n  const res = await axios.post(`http://localhost:5050/api/messages/${currentChatParamsId}`, {\n    content: messageInput,\n    userId: user._id,\n    chatId: currentChatParamsId\n  });\n  const chatsCopy = [...chats];\n  const currentChat = chatsCopy.find(chat => chat._id === currentChatParamsId);\n  if (!currentChat) return;\n  const membersIds = currentChat.membersInfos.map(member => member._id);\n  const receiversIds = membersIds.filter(id => id !== user._id);\n  const {\n    userId,\n    ...others\n  } = res.data;\n  const messageCopy = { ...others,\n    userInfos: user\n  }; // emitNewMessageSocket(messageCopy, receiversIds);\n  // updateCurrentChatLastMessage(messageCopy, currentChat, chatsCopy);\n  // setMessages([messageCopy, ...messages]);\n\n  setMessageInput(\"\");\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/sendMessage.tsx"],"names":["axios","useContext","useParams","ChatsContext","UserContext","user","chats","currentChatParamsId","chatId","sendMessage","messageInput","setMessageInput","res","post","content","userId","_id","chatsCopy","currentChat","find","chat","membersIds","membersInfos","map","member","receiversIds","filter","id","others","data","messageCopy","userInfos"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAWJ,UAAU,CAACG,WAAD,CAA3B;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAYL,UAAU,CAACE,YAAD,CAA5B;AACA,MAAMI,mBAAmB,GAAGL,SAAS,GAAGM,MAAxC;AAEA,OAAO,MAAMC,WAAW,GAAG,cAMrB;AAAA,MAN4B;AAChCC,IAAAA,YADgC;AAEhCC,IAAAA;AAFgC,GAM5B;AACJ,MAAID,YAAY,KAAK,EAAjB,IAAuB,CAACL,IAA5B,EAAkC;AAClC,QAAMO,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAN,CACf,sCAAqCN,mBAAoB,EAD1C,EAEhB;AACEO,IAAAA,OAAO,EAAEJ,YADX;AAEEK,IAAAA,MAAM,EAAEV,IAAI,CAACW,GAFf;AAGER,IAAAA,MAAM,EAAED;AAHV,GAFgB,CAAlB;AAQA,QAAMU,SAAS,GAAG,CAAC,GAAGX,KAAJ,CAAlB;AACA,QAAMY,WAAW,GAAGD,SAAS,CAACE,IAAV,CACjBC,IAAD,IAAUA,IAAI,CAACJ,GAAL,KAAaT,mBADL,CAApB;AAGA,MAAI,CAACW,WAAL,EAAkB;AAClB,QAAMG,UAAU,GAAGH,WAAW,CAACI,YAAZ,CAAyBC,GAAzB,CAA8BC,MAAD,IAAYA,MAAM,CAACR,GAAhD,CAAnB;AACA,QAAMS,YAAY,GAAGJ,UAAU,CAACK,MAAX,CAAmBC,EAAD,IAAQA,EAAE,KAAKtB,IAAI,CAACW,GAAtC,CAArB;AACA,QAAM;AAAED,IAAAA,MAAF;AAAU,OAAGa;AAAb,MAAwBhB,GAAG,CAACiB,IAAlC;AACA,QAAMC,WAAW,GAAG,EAClB,GAAGF,MADe;AAElBG,IAAAA,SAAS,EAAE1B;AAFO,GAApB,CAlBI,CAsBJ;AACA;AACA;;AACAM,EAAAA,eAAe,CAAC,EAAD,CAAf;AACD,CAhCM","sourcesContent":["import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ChatsContext } from \"../../../contexts/ChatsProvider\";\nimport { UserContext } from \"../../../contexts/UserProvider\";\n\nconst { user } = useContext(UserContext);\nconst { chats } = useContext(ChatsContext);\nconst currentChatParamsId = useParams().chatId;\n\nexport const sendMessage = async ({\n  messageInput,\n  setMessageInput,\n}: {\n  messageInput: string;\n  setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n}) => {\n  if (messageInput === \"\" || !user) return;\n  const res = await axios.post(\n    `http://localhost:5050/api/messages/${currentChatParamsId}`,\n    {\n      content: messageInput,\n      userId: user._id,\n      chatId: currentChatParamsId,\n    }\n  );\n  const chatsCopy = [...chats];\n  const currentChat = chatsCopy.find(\n    (chat) => chat._id === currentChatParamsId\n  );\n  if (!currentChat) return;\n  const membersIds = currentChat.membersInfos.map((member) => member._id);\n  const receiversIds = membersIds.filter((id) => id !== user._id);\n  const { userId, ...others } = res.data;\n  const messageCopy = {\n    ...others,\n    userInfos: user,\n  };\n  // emitNewMessageSocket(messageCopy, receiversIds);\n  // updateCurrentChatLastMessage(messageCopy, currentChat, chatsCopy);\n  // setMessages([messageCopy, ...messages]);\n  setMessageInput(\"\");\n};\n"]},"metadata":{},"sourceType":"module"}