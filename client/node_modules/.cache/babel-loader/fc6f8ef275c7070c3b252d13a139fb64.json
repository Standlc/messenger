{"ast":null,"code":"var _jsxFileName = \"/Users/stan/messenger/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\"; // import moment from \"moment\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const username = \"Elon\";\n  const socket = io(\"http://localhost:8080\", {\n    transports: [\"websocket\", \"polling\"]\n  });\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      socket.emit(\"username\", username);\n    });\n    socket.on(\"users\", users => {\n      setUsers(users);\n    });\n    socket.on(\"message\", message => {\n      setMessages([...messages, message]);\n    });\n    socket.on(\"connected\", user => {\n      setUsers([...users, user]);\n    });\n    socket.on(\"disconnected\", id => {\n      setUsers(users => {\n        return users.filter(user => user.id !== id);\n      });\n    });\n  }, []);\n\n  const submit = e => {\n    e.preventDefault();\n    socket.emit(\"send\", message);\n    setMessage(\"\");\n  };\n\n  console.log(users);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"messenger\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n_s(App, \"93w6bh+Z1aVYLQGzYipTKSuJkrw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/messenger/src/App.tsx"],"names":["React","useEffect","useState","io","App","username","socket","transports","users","setUsers","message","setMessage","messages","setMessages","on","emit","user","id","filter","submit","e","preventDefault","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,QAAQ,GAAG,MAAjB;AACA,QAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAD,EAA0B;AACzCI,IAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD6B,GAA1B,CAAjB;AAIA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAM,EAAN,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAM,EAAN,CAAtC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAM,EAAN,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACQ,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBR,MAAAA,MAAM,CAACS,IAAP,CAAY,UAAZ,EAAwBV,QAAxB;AACD,KAFD;AAIAC,IAAAA,MAAM,CAACQ,EAAP,CAAU,OAAV,EAAoBN,KAAD,IAAgB;AACjCC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAFD;AAIAF,IAAAA,MAAM,CAACQ,EAAP,CAAU,SAAV,EAAsBJ,OAAD,IAAkB;AACrCG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACD,KAFD;AAIAJ,IAAAA,MAAM,CAACQ,EAAP,CAAU,WAAV,EAAwBE,IAAD,IAAe;AACpCP,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWQ,IAAX,CAAD,CAAR;AACD,KAFD;AAIAV,IAAAA,MAAM,CAACQ,EAAP,CAAU,cAAV,EAA2BG,EAAD,IAAQ;AAChCR,MAAAA,QAAQ,CAAED,KAAD,IAAgB;AACvB,eAAOA,KAAK,CAACU,MAAN,CAAcF,IAAD,IAAeA,IAAI,CAACC,EAAL,KAAYA,EAAxC,CAAP;AACD,OAFO,CAAR;AAGD,KAJD;AAKD,GAtBQ,EAsBN,EAtBM,CAAT;;AAwBA,QAAME,MAAM,GAAIC,CAAD,IAAY;AACzBA,IAAAA,CAAC,CAACC,cAAF;AACAf,IAAAA,MAAM,CAACS,IAAP,CAAY,MAAZ,EAAoBL,OAApB;AACAC,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAJD;;AAMAW,EAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA3CD;;GAAMJ,G;;KAAAA,G;AA6CN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport io from \"socket.io-client\";\n// import moment from \"moment\";\n\nconst App = () => {\n  const username = \"Elon\";\n  const socket = io(\"http://localhost:8080\", {\n    transports: [\"websocket\", \"polling\"],\n  });\n\n  const [users, setUsers] = useState<any>([]);\n  const [message, setMessage] = useState<any>(\"\");\n  const [messages, setMessages] = useState<any>([]);\n\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      socket.emit(\"username\", username);\n    });\n\n    socket.on(\"users\", (users: any) => {\n      setUsers(users);\n    });\n\n    socket.on(\"message\", (message: any) => {\n      setMessages([...messages, message]);\n    });\n\n    socket.on(\"connected\", (user: any) => {\n      setUsers([...users, user]);\n    });\n\n    socket.on(\"disconnected\", (id) => {\n      setUsers((users: any) => {\n        return users.filter((user: any) => user.id !== id);\n      });\n    });\n  }, []);\n\n  const submit = (e: any) => {\n    e.preventDefault();\n    socket.emit(\"send\", message);\n    setMessage(\"\");\n  };\n\n  console.log(users);\n\n  return <div>messenger</div>;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}