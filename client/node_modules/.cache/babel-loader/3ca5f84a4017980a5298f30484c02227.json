{"ast":null,"code":"var _jsxFileName = \"/Users/stan/messenger/src/App.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./components\";\nimport io from \"socket.io-client\"; // import moment from \"moment\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst username = prompt(\"what is your username\");\nconst socket = io(\"http://localhost:3000\", {\n  transports: [\"websocket\", \"polling\"]\n});\nconst [users, setUsers] = useState([]);\nconst [message, setMessage] = useState(\"\");\nconst [messages, setMessages] = useState([]);\nuseEffect(() => {\n  socket.on(\"connect\", () => {\n    socket.emit(\"username\", username);\n  });\n  socket.on(\"users\", users => {\n    setUsers(users);\n  });\n  socket.on(\"message\", message => {\n    setMessages([...messages, message]);\n  });\n  socket.on(\"connected\", user => {\n    setUsers([...users, user]);\n  });\n  socket.on(\"disconnected\", id => {\n    setUsers(users => {\n      return users.filter(user => user.id !== id);\n    });\n  });\n}, []);\n\nconst submit = e => {\n  e.preventDefault();\n  socket.emit(\"send\", message);\n  setMessage(\"\");\n};\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Messenger\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/messenger/src/App.tsx"],"names":["React","useEffect","useState","io","username","prompt","socket","transports","users","setUsers","message","setMessage","messages","setMessages","on","emit","user","id","filter","submit","e","preventDefault","App"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAe,cAAf;AAEA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAAC,uBAAD,CAAvB;AACA,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAD,EAA0B;AACzCI,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD6B,CAA1B,CAAjB;AAIA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAM,EAAN,CAAlC;AACA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAM,EAAN,CAAtC;AACA,MAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAM,EAAN,CAAxC;AAEAD,SAAS,CAAC,MAAM;AACdK,EAAAA,MAAM,CAACQ,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBR,IAAAA,MAAM,CAACS,IAAP,CAAY,UAAZ,EAAwBX,QAAxB;AACD,GAFD;AAIAE,EAAAA,MAAM,CAACQ,EAAP,CAAU,OAAV,EAAoBN,KAAD,IAAgB;AACjCC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GAFD;AAIAF,EAAAA,MAAM,CAACQ,EAAP,CAAU,SAAV,EAAsBJ,OAAD,IAAkB;AACrCG,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACD,GAFD;AAIAJ,EAAAA,MAAM,CAACQ,EAAP,CAAU,WAAV,EAAwBE,IAAD,IAAe;AACpCP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWQ,IAAX,CAAD,CAAR;AACD,GAFD;AAIAV,EAAAA,MAAM,CAACQ,EAAP,CAAU,cAAV,EAA2BG,EAAD,IAAQ;AAChCR,IAAAA,QAAQ,CAAED,KAAD,IAAgB;AACvB,aAAOA,KAAK,CAACU,MAAN,CAAcF,IAAD,IAAeA,IAAI,CAACC,EAAL,KAAYA,EAAxC,CAAP;AACD,KAFO,CAAR;AAGD,GAJD;AAKD,CAtBQ,EAsBN,EAtBM,CAAT;;AAwBA,MAAME,MAAM,GAAIC,CAAD,IAAY;AACzBA,EAAAA,CAAC,CAACC,cAAF;AACAf,EAAAA,MAAM,CAACS,IAAP,CAAY,MAAZ,EAAoBL,OAApB;AACAC,EAAAA,UAAU,CAAC,EAAD,CAAV;AACD,CAJD;;AAMA,MAAMW,GAAG,GAAG,MAAM;AAChB,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;KAAMA,G;AAIN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {} from \"./components\";\n\nimport io from \"socket.io-client\";\n// import moment from \"moment\";\n\nconst username = prompt(\"what is your username\");\nconst socket = io(\"http://localhost:3000\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nconst [users, setUsers] = useState<any>([]);\nconst [message, setMessage] = useState<any>(\"\");\nconst [messages, setMessages] = useState<any>([]);\n\nuseEffect(() => {\n  socket.on(\"connect\", () => {\n    socket.emit(\"username\", username);\n  });\n\n  socket.on(\"users\", (users: any) => {\n    setUsers(users);\n  });\n\n  socket.on(\"message\", (message: any) => {\n    setMessages([...messages, message]);\n  });\n\n  socket.on(\"connected\", (user: any) => {\n    setUsers([...users, user]);\n  });\n\n  socket.on(\"disconnected\", (id) => {\n    setUsers((users: any) => {\n      return users.filter((user: any) => user.id !== id);\n    });\n  });\n}, []);\n\nconst submit = (e: any) => {\n  e.preventDefault();\n  socket.emit(\"send\", message);\n  setMessage(\"\");\n};\n\nconst App = () => {\n  return <div>Messenger</div>;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}