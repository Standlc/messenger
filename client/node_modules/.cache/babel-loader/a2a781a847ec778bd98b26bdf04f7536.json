{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport ConversationSideBar from \"./components/sideBarConversationsList/SideBarConversationsList\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./app.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\"; // import moment from \"moment\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // useEffect(() => {\n  //   localStorage.setItem(\n  //     \"user\",\n  //     JSON.stringify({\n  //       _id: \"6214bf8be824cba2c81db0dd\",\n  //       username: \"second\",\n  //       email: \"secondEmail\",\n  //       createdAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       updatedAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       __v: 0,\n  //     })\n  //   );\n  // }, []);\n  const [user, setUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []); //WEB SOCKET\n\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newUser\", user === null || user === void 0 ? void 0 : user._id);\n  }, [socket, user]);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", message => {\n      setMessages(prev => [...prev, message]);\n    });\n  }, [socket]); //WEB SOCKET\n\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(`http://localhost:5050/api/conversations/${user === null || user === void 0 ? void 0 : user._id}`);\n      setConversations(res.data);\n    };\n\n    getConversations();\n  }, [user]);\n  useEffect(() => {\n    const getMessages = async () => {\n      const res = await axios.get(`http://localhost:5050/api/messages/${selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id}`);\n      setMessages(res.data);\n    };\n\n    getMessages();\n  }, [selectedConversation]);\n\n  const sendMessage = async _ref => {\n    let {\n      messageInput,\n      setMessageInput\n    } = _ref;\n    if (messageInput === \"\" || !selectedConversation || !user) return;\n    const res = await axios.post(`http://localhost:5050/api/messages/${selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id}`, {\n      content: messageInput,\n      userID: user._id,\n      conversationID: selectedConversation._id\n    });\n    const membersIds = selectedConversation.membersInfos.map(member => member._id);\n    const receiversIds = membersIds.filter(id => id !== user._id);\n    const {\n      userID,\n      ...others\n    } = res.data;\n    const messageCopy = { ...others,\n      userInfos: user\n    };\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newMessage\", {\n      message: messageCopy,\n      receiversIds: receiversIds\n    });\n    setMessages([...messages, messageCopy]);\n    setMessageInput(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ConversationSideBar, {\n        conversations: conversations,\n        setSelectedConversation: setSelectedConversation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [/*#__PURE__*/_jsxDEV(MessagesList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"TlLyRB0R9FTv034R/b1FBuD+nik=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/App.tsx"],"names":["axios","React","useEffect","useState","io","ConversationSideBar","UserContext","MessagesList","ChatInput","App","user","setUser","messages","setMessages","conversations","setConversations","selectedConversation","setSelectedConversation","userJson","localStorage","getItem","JSON","parse","socket","setSocket","emit","_id","on","message","prev","getConversations","res","get","data","getMessages","sendMessage","messageInput","setMessageInput","post","content","userID","conversationID","membersIds","membersInfos","map","member","receiversIds","filter","id","others","messageCopy","userInfos"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io, { Socket } from \"socket.io-client\";\nimport ConversationSideBar from \"./components/sideBarConversationsList/SideBarConversationsList\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./app.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\n// import moment from \"moment\";\n\nexport type User = {\n  _id: string;\n  username: string;\n  email: string;\n  createdAt: Date;\n  updatedAt: Date;\n  __v: 0;\n};\n\nexport type Conversation = {\n  _id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  __v: number;\n  membersInfos: User[];\n};\n\nexport type Message = {\n  _id: string;\n  content: string;\n  userInfos: User;\n  conversationID: string;\n  createdAt: Date;\n  updatedAt: Date;\n  __v: number;\n};\n\nconst App = () => {\n  // useEffect(() => {\n  //   localStorage.setItem(\n  //     \"user\",\n  //     JSON.stringify({\n  //       _id: \"6214bf8be824cba2c81db0dd\",\n  //       username: \"second\",\n  //       email: \"secondEmail\",\n  //       createdAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       updatedAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       __v: 0,\n  //     })\n  //   );\n  // }, []);\n\n  const [user, setUser] = useState<User | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [selectedConversation, setSelectedConversation] =\n    useState<Conversation | null>(null);\n\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []);\n\n  //WEB SOCKET\n  const [socket, setSocket] = useState<Socket | null>(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n\n  useEffect(() => {\n    socket?.emit(\"newUser\", user?._id);\n  }, [socket, user]);\n\n  useEffect(() => {\n    socket?.on(\"newMessage\", (message) => {\n      setMessages((prev) => [...prev, message]);\n    });\n  }, [socket]);\n  //WEB SOCKET\n\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/conversations/${user?._id}`\n      );\n      setConversations(res.data);\n    };\n    getConversations();\n  }, [user]);\n\n  useEffect(() => {\n    const getMessages = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/messages/${selectedConversation?._id}`\n      );\n      setMessages(res.data);\n    };\n    getMessages();\n  }, [selectedConversation]);\n\n  const sendMessage = async ({\n    messageInput,\n    setMessageInput,\n  }: {\n    messageInput: string;\n    setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  }) => {\n    if (messageInput === \"\" || !selectedConversation || !user) return;\n    const res = await axios.post(\n      `http://localhost:5050/api/messages/${selectedConversation?._id}`,\n      {\n        content: messageInput,\n        userID: user._id,\n        conversationID: selectedConversation._id,\n      }\n    );\n    const membersIds = selectedConversation.membersInfos.map(\n      (member) => member._id\n    );\n    const receiversIds = membersIds.filter((id) => id !== user._id);\n    const { userID, ...others } = res.data;\n    const messageCopy = {\n      ...others,\n      userInfos: user,\n    };\n    socket?.emit(\"newMessage\", {\n      message: messageCopy,\n      receiversIds: receiversIds,\n    });\n    setMessages([...messages, messageCopy]);\n    setMessageInput(\"\");\n  };\n\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <div className=\"container\">\n        <ConversationSideBar\n          conversations={conversations}\n          setSelectedConversation={setSelectedConversation}\n        />\n        <div className=\"chat-box\">\n          <MessagesList messages={messages} />\n          <ChatInput sendMessage={sendMessage} />\n        </div>\n      </div>\n    </UserContext.Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}