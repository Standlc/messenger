{"ast":null,"code":"import { DateTime } from \"luxon\";\nexport const hasCloseNeighbor = _ref => {\n  var _messages$i;\n\n  let {\n    order,\n    messages,\n    i\n  } = _ref;\n  const neighborMessage = order === \"next\" ? messages[i - 1] : messages[i + 1];\n  const isNeighborOwnMessage = (neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.userInfos._id) === ((_messages$i = messages[i]) === null || _messages$i === void 0 ? void 0 : _messages$i.userInfos._id);\n  if (!neighborMessage || !isNeighborOwnMessage) return false;\n  const neighborMessageDate = neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.createdAt;\n  const messageDate = messages[i].createdAt;\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        year: \"2-digit\"\n      }),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        month: \"2-digit\"\n      }),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        day: \"2-digit\"\n      }),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        hour: \"2-digit\",\n        hourCycle: \"h23\"\n      })\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\";\n    return parseInt(table[isValidDateType ? dateType : \"year\"]);\n  };\n\n  if (order === \"next\") {\n    if (time(messageDate, \"year\") < time(neighborMessageDate, \"year\")) return;\n    if (time(messageDate, \"month\") < time(neighborMessageDate, \"month\")) return;\n    if (time(messageDate, \"day\") < time(neighborMessageDate, \"day\")) return;\n    console.log(Math.ceil(time(messageDate, \"hour\") / 24) < Math.ceil(time(neighborMessageDate, \"hour\") / 24));\n    return !(Math.ceil(time(messageDate, \"hour\") / 24) < Math.ceil(time(neighborMessageDate, \"hour\") / 24));\n  } else {\n    if (time(messageDate, \"year\") > time(neighborMessageDate, \"year\")) return;\n    if (time(messageDate, \"month\") > time(neighborMessageDate, \"month\")) return;\n    if (time(messageDate, \"day\") > time(neighborMessageDate, \"day\")) return;\n    return !(Math.ceil(time(messageDate, \"hour\") / 24) > Math.ceil(time(neighborMessageDate, \"hour\") / 24));\n  }\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx"],"names":["DateTime","hasCloseNeighbor","order","messages","i","neighborMessage","isNeighborOwnMessage","userInfos","_id","neighborMessageDate","createdAt","messageDate","time","messageCreatedAt","dateType","table","year","fromISO","toLocaleString","month","day","hour","hourCycle","isValidDateType","parseInt","console","log","Math","ceil"],"mappings":"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","sourcesContent":["import { Message } from \"../../../types\";\nimport { DateTime } from \"luxon\";\n\nexport const hasCloseNeighbor = ({\n  order,\n  messages,\n  i,\n}: {\n  order: string;\n  messages: Message[];\n  i: number;\n}) => {\n  const neighborMessage = order === \"next\" ? messages[i - 1] : messages[i + 1];\n\n  const isNeighborOwnMessage =\n    neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n\n  if (!neighborMessage || !isNeighborOwnMessage) return false;\n\n  const neighborMessageDate = neighborMessage?.createdAt;\n\n  const messageDate = messages[i].createdAt;\n\n  const time = (messageCreatedAt: string, dateType: string) => {\n    const table = {\n      year: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        year: \"2-digit\",\n      }),\n      month: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        month: \"2-digit\",\n      }),\n      day: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        day: \"2-digit\",\n      }),\n      hour: DateTime.fromISO(messageCreatedAt).toLocaleString({\n        hour: \"2-digit\",\n        hourCycle: \"h23\",\n      }),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\";\n\n    return parseInt(table[isValidDateType ? dateType : \"year\"]);\n  };\n\n  if (order === \"next\") {\n    if (time(messageDate, \"year\") < time(neighborMessageDate, \"year\")) return;\n\n    if (time(messageDate, \"month\") < time(neighborMessageDate, \"month\")) return;\n\n    if (time(messageDate, \"day\") < time(neighborMessageDate, \"day\")) return;\n    console.log(\n      Math.ceil(time(messageDate, \"hour\") / 24) <\n        Math.ceil(time(neighborMessageDate, \"hour\") / 24)\n    );\n    return !(\n      Math.ceil(time(messageDate, \"hour\") / 24) <\n      Math.ceil(time(neighborMessageDate, \"hour\") / 24)\n    );\n  } else {\n    if (time(messageDate, \"year\") > time(neighborMessageDate, \"year\")) return;\n\n    if (time(messageDate, \"month\") > time(neighborMessageDate, \"month\")) return;\n\n    if (time(messageDate, \"day\") > time(neighborMessageDate, \"day\")) return;\n\n    return !(\n      Math.ceil(time(messageDate, \"hour\") / 24) >\n      Math.ceil(time(neighborMessageDate, \"hour\") / 24)\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}