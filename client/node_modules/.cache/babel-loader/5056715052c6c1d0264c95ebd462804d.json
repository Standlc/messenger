{"ast":null,"code":"import moment from \"moment\";\nexport const isMessageClose = _ref => {\n  var _messages, _messages2, _messages$i;\n\n  let {\n    order,\n    messages,\n    i\n  } = _ref;\n  const neighborMessage = order === \"next\" ? messages[i + 1] : messages[i - 1];\n  const neighborMessageTime = order === \"next\" ? (_messages = messages[i + 1]) === null || _messages === void 0 ? void 0 : _messages.createdAt : (_messages2 = messages[i - 1]) === null || _messages2 === void 0 ? void 0 : _messages2.createdAt;\n  const currentMessageTime = messages[i].createdAt;\n  const isNeighborMessageOwn = (neighborMessage === null || neighborMessage === void 0 ? void 0 : neighborMessage.userInfos._id) === ((_messages$i = messages[i]) === null || _messages$i === void 0 ? void 0 : _messages$i.userInfos._id);\n  if (!neighborMessage || !neighborMessageTime || !isNeighborMessageOwn) return false;\n  const dateTypes = [\"year\", \"month\", \"day\", \"hour\", \"minute\"];\n\n  const time = (messageCreatedAt, dateType) => {\n    const table = {\n      year: moment(messageCreatedAt).format().substring(0, 4),\n      month: moment(messageCreatedAt).format().substring(5, 7),\n      day: moment(messageCreatedAt).format().substring(8, 10),\n      hour: moment(messageCreatedAt).format().substring(11, 13),\n      minute: moment(messageCreatedAt).format().substring(14, 16)\n    };\n    const isValidDateType = dateType === \"year\" || dateType === \"month\" || dateType === \"day\" || dateType === \"hour\" || dateType === \"minute\";\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  dateTypes.map(dateType => {\n    console.log(\"first\");\n    if (time(currentMessageTime, dateType) < time(neighborMessageTime, dateType)) return false;\n    return true;\n  }); //   if (time(currentMessageTime, \"year\") < time(neighborMessageTime, \"year\"))\n  //     return false;\n  //   if (time(currentMessageTime, \"month\") < time(neighborMessageTime, \"month\"))\n  //     return false;\n  //   if (time(currentMessageTime, \"day\") < time(neighborMessageTime, \"day\"))\n  //     return false;\n  //   if (time(currentMessageTime, \"hour\") < time(neighborMessageTime, \"hour\"))\n  //     return false;\n  //   return !(\n  //     time(currentMessageTime, \"minute\") < time(neighborMessageTime, \"minute\")\n  //   );\n};","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx"],"names":["moment","isMessageClose","order","messages","i","neighborMessage","neighborMessageTime","createdAt","currentMessageTime","isNeighborMessageOwn","userInfos","_id","dateTypes","time","messageCreatedAt","dateType","table","year","format","substring","month","day","hour","minute","isValidDateType","map","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAGA,OAAO,MAAMC,cAAc,GAAG,QAQxB;AAAA;;AAAA,MARyB;AAC7BC,IAAAA,KAD6B;AAE7BC,IAAAA,QAF6B;AAG7BC,IAAAA;AAH6B,GAQzB;AACJ,QAAMC,eAAe,GAAGH,KAAK,KAAK,MAAV,GAAmBC,QAAQ,CAACC,CAAC,GAAG,CAAL,CAA3B,GAAqCD,QAAQ,CAACC,CAAC,GAAG,CAAL,CAArE;AACA,QAAME,mBAAmB,GACvBJ,KAAK,KAAK,MAAV,gBAAmBC,QAAQ,CAACC,CAAC,GAAG,CAAL,CAA3B,8CAAmB,UAAiBG,SAApC,iBAAgDJ,QAAQ,CAACC,CAAC,GAAG,CAAL,CAAxD,+CAAgD,WAAiBG,SADnE;AAEA,QAAMC,kBAAkB,GAAGL,QAAQ,CAACC,CAAD,CAAR,CAAYG,SAAvC;AACA,QAAME,oBAAoB,GACxB,CAAAJ,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEK,SAAjB,CAA2BC,GAA3B,sBAAmCR,QAAQ,CAACC,CAAD,CAA3C,gDAAmC,YAAaM,SAAb,CAAuBC,GAA1D,CADF;AAGA,MAAI,CAACN,eAAD,IAAoB,CAACC,mBAArB,IAA4C,CAACG,oBAAjD,EACE,OAAO,KAAP;AAEF,QAAMG,SAAS,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,MAAzB,EAAiC,QAAjC,CAAlB;;AAEA,QAAMC,IAAI,GAAG,CAACC,gBAAD,EAAyBC,QAAzB,KAA8C;AACzD,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAEjB,MAAM,CAACc,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,CAA5C,EAA+C,CAA/C,CADM;AAEZC,MAAAA,KAAK,EAAEpB,MAAM,CAACc,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,CAA5C,EAA+C,CAA/C,CAFK;AAGZE,MAAAA,GAAG,EAAErB,MAAM,CAACc,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,CAA5C,EAA+C,EAA/C,CAHO;AAIZG,MAAAA,IAAI,EAAEtB,MAAM,CAACc,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,EAA5C,EAAgD,EAAhD,CAJM;AAKZI,MAAAA,MAAM,EAAEvB,MAAM,CAACc,gBAAD,CAAN,CAAyBI,MAAzB,GAAkCC,SAAlC,CAA4C,EAA5C,EAAgD,EAAhD;AALI,KAAd;AAOA,UAAMK,eAAe,GACnBT,QAAQ,KAAK,MAAb,IACAA,QAAQ,KAAK,OADb,IAEAA,QAAQ,KAAK,KAFb,IAGAA,QAAQ,KAAK,MAHb,IAIAA,QAAQ,KAAK,QALf;AAOA,WAAOC,KAAK,CAACQ,eAAe,GAAGT,QAAH,GAAc,MAA9B,CAAZ;AACD,GAhBD;;AAkBAH,EAAAA,SAAS,CAACa,GAAV,CAAeV,QAAD,IAAc;AAC1BW,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,QACEd,IAAI,CAACL,kBAAD,EAAqBO,QAArB,CAAJ,GAAqCF,IAAI,CAACP,mBAAD,EAAsBS,QAAtB,CAD3C,EAGE,OAAO,KAAP;AACF,WAAO,IAAP;AACD,GAPD,EA/BI,CAwCJ;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACD,CA/DM","sourcesContent":["import moment from \"moment\";\nimport { Message } from \"../../../ChatApp\";\n\nexport const isMessageClose = ({\n  order,\n  messages,\n  i,\n}: {\n  order: string;\n  messages: Message[];\n  i: number;\n}) => {\n  const neighborMessage = order === \"next\" ? messages[i + 1] : messages[i - 1];\n  const neighborMessageTime =\n    order === \"next\" ? messages[i + 1]?.createdAt : messages[i - 1]?.createdAt;\n  const currentMessageTime = messages[i].createdAt;\n  const isNeighborMessageOwn =\n    neighborMessage?.userInfos._id === messages[i]?.userInfos._id;\n\n  if (!neighborMessage || !neighborMessageTime || !isNeighborMessageOwn)\n    return false;\n\n  const dateTypes = [\"year\", \"month\", \"day\", \"hour\", \"minute\"];\n\n  const time = (messageCreatedAt: Date, dateType: string) => {\n    const table = {\n      year: moment(messageCreatedAt).format().substring(0, 4),\n      month: moment(messageCreatedAt).format().substring(5, 7),\n      day: moment(messageCreatedAt).format().substring(8, 10),\n      hour: moment(messageCreatedAt).format().substring(11, 13),\n      minute: moment(messageCreatedAt).format().substring(14, 16),\n    };\n    const isValidDateType =\n      dateType === \"year\" ||\n      dateType === \"month\" ||\n      dateType === \"day\" ||\n      dateType === \"hour\" ||\n      dateType === \"minute\";\n\n    return table[isValidDateType ? dateType : \"year\"];\n  };\n\n  dateTypes.map((dateType) => {\n    console.log(\"first\");\n    if (\n      time(currentMessageTime, dateType) < time(neighborMessageTime, dateType)\n    )\n      return false;\n    return true;\n  });\n\n  //   if (time(currentMessageTime, \"year\") < time(neighborMessageTime, \"year\"))\n  //     return false;\n\n  //   if (time(currentMessageTime, \"month\") < time(neighborMessageTime, \"month\"))\n  //     return false;\n\n  //   if (time(currentMessageTime, \"day\") < time(neighborMessageTime, \"day\"))\n  //     return false;\n\n  //   if (time(currentMessageTime, \"hour\") < time(neighborMessageTime, \"hour\"))\n  //     return false;\n\n  //   return !(\n  //     time(currentMessageTime, \"minute\") < time(neighborMessageTime, \"minute\")\n  //   );\n};\n"]},"metadata":{},"sourceType":"module"}