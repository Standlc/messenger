{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/ChatApp.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport ConversationSideBar from \"./components/sideBarConversationsList/SideBarConversationsList\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./chatApp.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\nimport { useParams } from \"react-router-dom\";\nimport ChatHeader from \"./components/chat/chatHeader/ChatHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [conversations, setConversations] = useState([]);\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const currentConversationIdParams = useParams().conversationId;\n  useEffect(() => {\n    const foundCurrentConversation = conversations.find(conversation => conversation._id === currentConversationIdParams);\n    if (!foundCurrentConversation) return;\n    setCurrentConversation(foundCurrentConversation);\n  }, [currentConversationIdParams, conversations]); //GET USER\n\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []); //WEB SOCKET\n\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newUser\", user === null || user === void 0 ? void 0 : user._id);\n  }, [socket, user]);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", message => {\n      setMessages(prev => [...prev, message]);\n    });\n  }, [socket]);\n\n  const emitNewMessageSocket = (message, receiversIds) => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newMessage\", {\n      message,\n      receiversIds\n    });\n  };\n\n  const updateConversationLastMessage = message => {\n    if (!currentConversation) return;\n    const {\n      userInfos,\n      ...others\n    } = message;\n    console.log({ ...currentConversation\n    }, message); // setCurrentConversation({ ...currentConversation, lastMessage: message });\n  };\n\n  console.log(currentConversation);\n\n  const sortMessages = data => {\n    setMessages(data.sort((m1, m2) => {\n      return new Date(m2.createdAt).valueOf() - new Date(m1.createdAt).valueOf();\n    }));\n  }; //GET CONVERSATIONS\n\n\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(`http://localhost:5050/api/conversations/${user === null || user === void 0 ? void 0 : user._id}`);\n      setConversations(res.data);\n    };\n\n    getConversations();\n  }, [user]); //GET MESSAGES\n\n  useEffect(() => {\n    if (!currentConversationIdParams) return;\n\n    const getMessages = async () => {\n      const res = await axios.get(`http://localhost:5050/api/messages/${currentConversationIdParams}`);\n      sortMessages(res.data);\n    };\n\n    getMessages();\n  }, [currentConversationIdParams]); //SEND MESSAGE\n\n  const sendMessage = async _ref => {\n    let {\n      messageInput,\n      setMessageInput\n    } = _ref;\n    if (messageInput === \"\" || !currentConversation || !user) return;\n    const res = await axios.post(`http://localhost:5050/api/messages/${currentConversationIdParams}`, {\n      content: messageInput,\n      userID: user._id,\n      conversationID: currentConversationIdParams\n    });\n    const membersIds = currentConversation.membersInfos.map(member => member._id);\n    const receiversIds = membersIds.filter(id => id !== user._id);\n    const {\n      userID,\n      ...others\n    } = res.data;\n    const messageCopy = { ...others,\n      userInfos: user\n    };\n    emitNewMessageSocket(messageCopy, receiversIds);\n    updateConversationLastMessage(res.data);\n    setMessages([messageCopy, ...messages]);\n    setMessageInput(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ConversationSideBar, {\n        conversations: conversations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n          currentConversation: currentConversation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessagesList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"h3TqIDtFqk+TQfiSFcIFTrwFJUo=\", false, function () {\n  return [useParams];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/ChatApp.tsx"],"names":["axios","React","useEffect","useState","io","ConversationSideBar","UserContext","MessagesList","ChatInput","useParams","ChatHeader","App","user","setUser","messages","setMessages","conversations","setConversations","currentConversation","setCurrentConversation","currentConversationIdParams","conversationId","foundCurrentConversation","find","conversation","_id","userJson","localStorage","getItem","JSON","parse","socket","setSocket","emit","on","message","prev","emitNewMessageSocket","receiversIds","updateConversationLastMessage","userInfos","others","console","log","sortMessages","data","sort","m1","m2","Date","createdAt","valueOf","getConversations","res","get","getMessages","sendMessage","messageInput","setMessageInput","post","content","userID","conversationID","membersIds","membersInfos","map","member","filter","id","messageCopy"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io, { Socket } from \"socket.io-client\";\nimport ConversationSideBar from \"./components/sideBarConversationsList/SideBarConversationsList\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./chatApp.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\nimport { useParams } from \"react-router-dom\";\nimport ChatHeader from \"./components/chat/chatHeader/ChatHeader\";\n\nexport type User = {\n  _id: string;\n  username: string;\n  email: string;\n  profilePicture: string;\n  createdAt: string;\n  updatedAt: string;\n};\nexport type Message = {\n  _id: string;\n  content: string;\n  userInfos: User;\n  conversationID: string;\n  createdAt: string;\n  updatedAt: string;\n};\nexport interface Conversation {\n  _id: string;\n  createdAt: string;\n  updatedAt: string;\n  membersInfos: User[];\n  lastMessage: {\n    _id: string;\n    content: string;\n    userID: string;\n    createdAt: string;\n    updatedAt: string;\n  };\n}\n\nconst App = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [currentConversation, setCurrentConversation] =\n    useState<Conversation | null>(null);\n  const currentConversationIdParams = useParams().conversationId;\n\n  useEffect(() => {\n    const foundCurrentConversation = conversations.find(\n      (conversation) => conversation._id === currentConversationIdParams\n    );\n    if (!foundCurrentConversation) return;\n    setCurrentConversation(foundCurrentConversation);\n  }, [currentConversationIdParams, conversations]);\n\n  //GET USER\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []);\n\n  //WEB SOCKET\n  const [socket, setSocket] = useState<Socket | null>(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n  useEffect(() => {\n    socket?.emit(\"newUser\", user?._id);\n  }, [socket, user]);\n  useEffect(() => {\n    socket?.on(\"newMessage\", (message) => {\n      setMessages((prev) => [...prev, message]);\n    });\n  }, [socket]);\n\n  const emitNewMessageSocket = (message: Message, receiversIds: string[]) => {\n    socket?.emit(\"newMessage\", {\n      message,\n      receiversIds,\n    });\n  };\n\n  const updateConversationLastMessage = (message: Message) => {\n    if (!currentConversation) return;\n    const { userInfos, ...others } = message;\n    console.log({ ...currentConversation }, message);\n    // setCurrentConversation({ ...currentConversation, lastMessage: message });\n  };\n  console.log(currentConversation);\n\n  const sortMessages = (data: Message[]) => {\n    setMessages(\n      data.sort((m1: Message, m2: Message) => {\n        return (\n          new Date(m2.createdAt).valueOf() - new Date(m1.createdAt).valueOf()\n        );\n      })\n    );\n  };\n\n  //GET CONVERSATIONS\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/conversations/${user?._id}`\n      );\n      setConversations(res.data);\n    };\n    getConversations();\n  }, [user]);\n\n  //GET MESSAGES\n  useEffect(() => {\n    if (!currentConversationIdParams) return;\n    const getMessages = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/messages/${currentConversationIdParams}`\n      );\n      sortMessages(res.data);\n    };\n    getMessages();\n  }, [currentConversationIdParams]);\n\n  //SEND MESSAGE\n  const sendMessage = async ({\n    messageInput,\n    setMessageInput,\n  }: {\n    messageInput: string;\n    setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  }) => {\n    if (messageInput === \"\" || !currentConversation || !user) return;\n    const res = await axios.post(\n      `http://localhost:5050/api/messages/${currentConversationIdParams}`,\n      {\n        content: messageInput,\n        userID: user._id,\n        conversationID: currentConversationIdParams,\n      }\n    );\n    const membersIds = currentConversation.membersInfos.map(\n      (member) => member._id\n    );\n    const receiversIds = membersIds.filter((id) => id !== user._id);\n    const { userID, ...others } = res.data;\n    const messageCopy = {\n      ...others,\n      userInfos: user,\n    };\n    emitNewMessageSocket(messageCopy, receiversIds);\n    updateConversationLastMessage(res.data);\n    setMessages([messageCopy, ...messages]);\n    setMessageInput(\"\");\n  };\n\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <div className=\"container\">\n        <ConversationSideBar conversations={conversations} />\n        <div className=\"chat-box\">\n          <ChatHeader currentConversation={currentConversation} />\n          <MessagesList messages={messages} />\n          <ChatInput sendMessage={sendMessage} />\n        </div>\n      </div>\n    </UserContext.Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}