{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/ChatApp.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport ConversationSideBar from \"./components/sideBarConversationsList/SideBarConversationsList\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./chatApp.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\nimport { useParams } from \"react-router-dom\";\nimport ChatHeader from \"./components/chat/chatHeader/ChatHeader\"; // import moment from \"moment\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // useEffect(() => {\n  //   localStorage.setItem(\n  //     \"user\",\n  //     JSON.stringify({\n  //       _id: \"6216ade7d4ba9eda5415eb9c\",\n  //       username: \"second\",\n  //       email: \"secondEmail\",\n  //       profilePicture: \"\",\n  //       createdAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       updatedAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       __v: 0,\n  //     })\n  //   );\n  // }, []);\n  const [user, setUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [conversations, setConversations] = useState([]);\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const currentConversationId = useParams().conversationId;\n  useEffect(() => {\n    console.log(\"first\");\n    const foundCurrentConversation = conversations.find(conversation => conversation._id === currentConversationId);\n    if (!foundCurrentConversation) return;\n    setCurrentConversation(foundCurrentConversation);\n  }, [currentConversationId]);\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []); //WEB SOCKET\n\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newUser\", user === null || user === void 0 ? void 0 : user._id);\n  }, [socket, user]);\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", message => {\n      setMessages(prev => [...prev, message]);\n    });\n  }, [socket]); //WEB SOCKET\n\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(`http://localhost:5050/api/conversations/${user === null || user === void 0 ? void 0 : user._id}`);\n      setConversations(res.data);\n    };\n\n    getConversations();\n  }, [user]);\n  useEffect(() => {\n    const getMessages = async () => {\n      if (!currentConversationId) return;\n      const res = await axios.get(`http://localhost:5050/api/messages/${currentConversationId}`);\n      setMessages(res.data);\n    };\n\n    getMessages();\n  }, [currentConversationId]);\n\n  const sendMessage = async _ref => {\n    let {\n      messageInput,\n      setMessageInput\n    } = _ref;\n    if (messageInput === \"\" || !currentConversation || !user) return;\n    const res = await axios.post(`http://localhost:5050/api/messages/${currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation._id}`, {\n      content: messageInput,\n      userID: user._id,\n      conversationID: currentConversation._id\n    });\n    const membersIds = currentConversation.membersInfos.map(member => member._id);\n    const receiversIds = membersIds.filter(id => id !== user._id);\n    const {\n      userID,\n      ...others\n    } = res.data;\n    const messageCopy = { ...others,\n      userInfos: user\n    };\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"newMessage\", {\n      message: messageCopy,\n      receiversIds: receiversIds\n    });\n    setMessages([...messages, messageCopy]);\n    setMessageInput(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ConversationSideBar, {\n        conversations: conversations,\n        setCurrentConversation: setCurrentConversation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n          currentConversation: currentConversation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessagesList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"h3TqIDtFqk+TQfiSFcIFTrwFJUo=\", false, function () {\n  return [useParams];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/ChatApp.tsx"],"names":["axios","React","useEffect","useState","io","ConversationSideBar","UserContext","MessagesList","ChatInput","useParams","ChatHeader","App","user","setUser","messages","setMessages","conversations","setConversations","currentConversation","setCurrentConversation","currentConversationId","conversationId","console","log","foundCurrentConversation","find","conversation","_id","userJson","localStorage","getItem","JSON","parse","socket","setSocket","emit","on","message","prev","getConversations","res","get","data","getMessages","sendMessage","messageInput","setMessageInput","post","content","userID","conversationID","membersIds","membersInfos","map","member","receiversIds","filter","id","others","messageCopy","userInfos"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport io, { Socket } from \"socket.io-client\";\nimport ConversationSideBar from \"./components/sideBarConversationsList/SideBarConversationsList\";\nimport { UserContext } from \"./contexts/UserProvider\";\nimport \"./chatApp.css\";\nimport MessagesList from \"./components/chat/messagesList/MessagesList\";\nimport ChatInput from \"./components/chat/chatInput/ChatInput\";\nimport { useParams } from \"react-router-dom\";\nimport ChatHeader from \"./components/chat/chatHeader/ChatHeader\";\n// import moment from \"moment\";\n\nexport type User = {\n  _id: string;\n  username: string;\n  email: string;\n  profilePicture: string;\n  createdAt: Date;\n  updatedAt: Date;\n  __v: 0;\n};\n\nexport type Conversation = {\n  _id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  __v: number;\n  membersInfos: User[];\n};\n\nexport type Message = {\n  _id: string;\n  content: string;\n  userInfos: User;\n  conversationID: string;\n  createdAt: Date;\n  updatedAt: Date;\n  __v: number;\n};\n\nconst App = () => {\n  // useEffect(() => {\n  //   localStorage.setItem(\n  //     \"user\",\n  //     JSON.stringify({\n  //       _id: \"6216ade7d4ba9eda5415eb9c\",\n  //       username: \"second\",\n  //       email: \"secondEmail\",\n  //       profilePicture: \"\",\n  //       createdAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       updatedAt: \"2022-02-22T10:48:43.521+00:00\",\n  //       __v: 0,\n  //     })\n  //   );\n  // }, []);\n  const [user, setUser] = useState<User | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [currentConversation, setCurrentConversation] =\n    useState<Conversation | null>(null);\n  const currentConversationId = useParams().conversationId;\n\n  useEffect(() => {\n    console.log(\"first\");\n    const foundCurrentConversation = conversations.find(\n      (conversation) => conversation._id === currentConversationId\n    );\n    if (!foundCurrentConversation) return;\n    setCurrentConversation(foundCurrentConversation);\n  }, [currentConversationId]);\n\n  useEffect(() => {\n    const userJson = localStorage.getItem(\"user\");\n    userJson && setUser(JSON.parse(userJson));\n  }, []);\n\n  //WEB SOCKET\n  const [socket, setSocket] = useState<Socket | null>(null);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:8080\"));\n  }, []);\n\n  useEffect(() => {\n    socket?.emit(\"newUser\", user?._id);\n  }, [socket, user]);\n\n  useEffect(() => {\n    socket?.on(\"newMessage\", (message) => {\n      setMessages((prev) => [...prev, message]);\n    });\n  }, [socket]);\n  //WEB SOCKET\n\n  useEffect(() => {\n    const getConversations = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/conversations/${user?._id}`\n      );\n      setConversations(res.data);\n    };\n    getConversations();\n  }, [user]);\n\n  useEffect(() => {\n    const getMessages = async () => {\n      if (!currentConversationId) return;\n      const res = await axios.get(\n        `http://localhost:5050/api/messages/${currentConversationId}`\n      );\n      setMessages(res.data);\n    };\n    getMessages();\n  }, [currentConversationId]);\n\n  const sendMessage = async ({\n    messageInput,\n    setMessageInput,\n  }: {\n    messageInput: string;\n    setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  }) => {\n    if (messageInput === \"\" || !currentConversation || !user) return;\n    const res = await axios.post(\n      `http://localhost:5050/api/messages/${currentConversation?._id}`,\n      {\n        content: messageInput,\n        userID: user._id,\n        conversationID: currentConversation._id,\n      }\n    );\n    const membersIds = currentConversation.membersInfos.map(\n      (member) => member._id\n    );\n    const receiversIds = membersIds.filter((id) => id !== user._id);\n    const { userID, ...others } = res.data;\n    const messageCopy = {\n      ...others,\n      userInfos: user,\n    };\n    socket?.emit(\"newMessage\", {\n      message: messageCopy,\n      receiversIds: receiversIds,\n    });\n    setMessages([...messages, messageCopy]);\n    setMessageInput(\"\");\n  };\n\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <div className=\"container\">\n        <ConversationSideBar\n          conversations={conversations}\n          setCurrentConversation={setCurrentConversation}\n        />\n        <div className=\"chat-box\">\n          <ChatHeader currentConversation={currentConversation} />\n          <MessagesList messages={messages} />\n          <ChatInput sendMessage={sendMessage} />\n        </div>\n      </div>\n    </UserContext.Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}