{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/MessagesList.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { UserContext } from \"../../../contexts/UserProvider\";\nimport ChatMessage from \"./chatMessage/ChatMessage\";\nimport \"./messagesList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MessagesList = _ref => {\n  _s();\n\n  let {\n    messages,\n    setMessages\n  } = _ref;\n  const {\n    user\n  } = useContext(UserContext);\n  const currentChatParamsId = useParams().chatId;\n  const chatMessagesWrapperRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n\n  const sortMessages = messages => {\n    setMessages(messages.sort((m1, m2) => {\n      return new Date(m2.createdAt).valueOf() - new Date(m1.createdAt).valueOf();\n    }));\n  };\n\n  const fetchMessagesWhenReachingTop = () => {\n    const chatMessageRefCurrent = chatMessagesWrapperRef.current;\n    if (!chatMessageRefCurrent) return;\n    const scrollableHeight = chatMessageRefCurrent.scrollHeight - chatMessageRefCurrent.getBoundingClientRect().height;\n\n    const hasReachedTop = () => {\n      if (scrollableHeight + chatMessageRefCurrent.scrollTop > 0) return false;else return true;\n    }; // console.log(hasReachedTop());\n\n  }; //GET MESSAGES\n\n\n  useEffect(() => {\n    if (!currentChatParamsId) return;\n\n    const getMessages = async () => {\n      const res = await axios.get(`http://localhost:5050/api/messages/${currentChatParamsId}`);\n      sortMessages(res.data);\n    };\n\n    getMessages();\n  }, [currentChatParamsId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-messages-list-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      onScroll: fetchMessagesWhenReachingTop,\n      ref: chatMessagesWrapperRef,\n      className: \"chat-messages-list-wrapper\",\n      children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        messages: messages,\n        i: i\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessagesList, \"ziufRu8lB4Y35D3AWodQdZGhCJQ=\", false, function () {\n  return [useParams];\n});\n\n_c = MessagesList;\nexport default MessagesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessagesList\");","map":{"version":3,"sources":["/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/MessagesList.tsx"],"names":["axios","React","useContext","useEffect","useRef","useState","useParams","UserContext","ChatMessage","MessagesList","messages","setMessages","user","currentChatParamsId","chatId","chatMessagesWrapperRef","loading","setLoading","sortMessages","sort","m1","m2","Date","createdAt","valueOf","fetchMessagesWhenReachingTop","chatMessageRefCurrent","current","scrollableHeight","scrollHeight","getBoundingClientRect","height","hasReachedTop","scrollTop","getMessages","res","get","data","map","message","i","_id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAO,oBAAP;;;AAEA,MAAMC,YAAY,GAAG,QAMf;AAAA;;AAAA,MANgB;AACpBC,IAAAA,QADoB;AAEpBC,IAAAA;AAFoB,GAMhB;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAWV,UAAU,CAACK,WAAD,CAA3B;AACA,QAAMM,mBAAmB,GAAGP,SAAS,GAAGQ,MAAxC;AACA,QAAMC,sBAAsB,GAAGX,MAAM,CAAiB,IAAjB,CAArC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMa,YAAY,GAAIR,QAAD,IAAyB;AAC5CC,IAAAA,WAAW,CACTD,QAAQ,CAACS,IAAT,CAAc,CAACC,EAAD,EAAcC,EAAd,KAA8B;AAC1C,aACE,IAAIC,IAAJ,CAASD,EAAE,CAACE,SAAZ,EAAuBC,OAAvB,KAAmC,IAAIF,IAAJ,CAASF,EAAE,CAACG,SAAZ,EAAuBC,OAAvB,EADrC;AAGD,KAJD,CADS,CAAX;AAOD,GARD;;AAUA,QAAMC,4BAA4B,GAAG,MAAM;AACzC,UAAMC,qBAAqB,GAAGX,sBAAsB,CAACY,OAArD;AACA,QAAI,CAACD,qBAAL,EAA4B;AAC5B,UAAME,gBAAgB,GACpBF,qBAAqB,CAACG,YAAtB,GACAH,qBAAqB,CAACI,qBAAtB,GAA8CC,MAFhD;;AAGA,UAAMC,aAAa,GAAG,MAAM;AAC1B,UAAIJ,gBAAgB,GAAGF,qBAAqB,CAACO,SAAzC,GAAqD,CAAzD,EAA4D,OAAO,KAAP,CAA5D,KACK,OAAO,IAAP;AACN,KAHD,CANyC,CAUzC;;AACD,GAXD,CAhBI,CA6BJ;;;AACA9B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,mBAAL,EAA0B;;AAC1B,UAAMqB,WAAW,GAAG,YAAY;AAC9B,YAAMC,GAAG,GAAG,MAAMnC,KAAK,CAACoC,GAAN,CACf,sCAAqCvB,mBAAoB,EAD1C,CAAlB;AAGAK,MAAAA,YAAY,CAACiB,GAAG,CAACE,IAAL,CAAZ;AACD,KALD;;AAMAH,IAAAA,WAAW;AACZ,GATQ,EASN,CAACrB,mBAAD,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA,2BACE;AACE,MAAA,QAAQ,EAAEY,4BADZ;AAEE,MAAA,GAAG,EAAEV,sBAFP;AAGE,MAAA,SAAS,EAAC,4BAHZ;AAAA,gBAKGL,QAAQ,CAAC4B,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,kBACZ,QAAC,WAAD;AAA+B,QAAA,QAAQ,EAAE9B,QAAzC;AAAmD,QAAA,CAAC,EAAE8B;AAAtD,SAAkBD,OAAO,CAACE,GAA1B;AAAA;AAAA;AAAA;AAAA,cADD;AALH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA5DD;;GAAMhC,Y;UAQwBH,S;;;KARxBG,Y;AA8DN,eAAeA,YAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { UserContext } from \"../../../contexts/UserProvider\";\nimport { Message } from \"../../../types\";\nimport ChatMessage from \"./chatMessage/ChatMessage\";\nimport \"./messagesList.css\";\n\nconst MessagesList = ({\n  messages,\n  setMessages,\n}: {\n  messages: Message[];\n  setMessages: React.Dispatch<React.SetStateAction<Message[]>>;\n}) => {\n  const { user } = useContext(UserContext);\n  const currentChatParamsId = useParams().chatId;\n  const chatMessagesWrapperRef = useRef<HTMLDivElement>(null);\n  const [loading, setLoading] = useState(true);\n\n  const sortMessages = (messages: Message[]) => {\n    setMessages(\n      messages.sort((m1: Message, m2: Message) => {\n        return (\n          new Date(m2.createdAt).valueOf() - new Date(m1.createdAt).valueOf()\n        );\n      })\n    );\n  };\n\n  const fetchMessagesWhenReachingTop = () => {\n    const chatMessageRefCurrent = chatMessagesWrapperRef.current;\n    if (!chatMessageRefCurrent) return;\n    const scrollableHeight =\n      chatMessageRefCurrent.scrollHeight -\n      chatMessageRefCurrent.getBoundingClientRect().height;\n    const hasReachedTop = () => {\n      if (scrollableHeight + chatMessageRefCurrent.scrollTop > 0) return false;\n      else return true;\n    };\n    // console.log(hasReachedTop());\n  };\n\n  //GET MESSAGES\n  useEffect(() => {\n    if (!currentChatParamsId) return;\n    const getMessages = async () => {\n      const res = await axios.get(\n        `http://localhost:5050/api/messages/${currentChatParamsId}`\n      );\n      sortMessages(res.data);\n    };\n    getMessages();\n  }, [currentChatParamsId]);\n\n  return (\n    <div className=\"chat-messages-list-container\">\n      <div\n        onScroll={fetchMessagesWhenReachingTop}\n        ref={chatMessagesWrapperRef}\n        className=\"chat-messages-list-wrapper\"\n      >\n        {messages.map((message, i) => (\n          <ChatMessage key={message._id} messages={messages} i={i} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MessagesList;\n"]},"metadata":{},"sourceType":"module"}