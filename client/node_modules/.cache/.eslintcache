[{"/Users/stan/Desktop/messenger/client/src/index.tsx":"1","/Users/stan/Desktop/messenger/client/src/contexts/UserProvider.tsx":"2","/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/MessagesList.tsx":"3","/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/ChatInput.tsx":"4","/Users/stan/Desktop/messenger/client/src/ChatApp.tsx":"5","/Users/stan/Desktop/messenger/client/src/App.tsx":"6","/Users/stan/Desktop/messenger/client/src/components/profilePicture/ProfilePicture.tsx":"7","/Users/stan/Desktop/messenger/client/src/components/chat/chatHeader/ChatHeader.tsx":"8","/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx":"9","/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/ChatMessage.tsx":"10","/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/sideBarHeader/SideBarHeader.tsx":"11","/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/sideBarHeader/sideBarSearchInput/SideBarSearchInput.tsx":"12","/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/sideBarItem/SideBarChatItem.tsx":"13","/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/ChatSideBar.tsx":"14","/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/scrollIntoView.tsx":"15","/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/chatTime/ChatDate.tsx":"16","/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/chatTime/hasAboveNeighbor.tsx":"17","/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/chatMessageDateFormat.tsx":"18","/Users/stan/Desktop/messenger/client/src/contexts/ChatsProvider.tsx":"19","/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/sideBarHeader/chatSideBarSearchResults/ChatSideBarSearchResults.tsx":"20","/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/sendMessage.tsx":"21","/Users/stan/Desktop/messenger/client/src/sortChats.tsx":"22"},{"size":197,"mtime":1645697951908,"results":"23","hashOfConfig":"24"},{"size":292,"mtime":1645836526162,"results":"25","hashOfConfig":"24"},{"size":515,"mtime":1645836384762,"results":"26","hashOfConfig":"24"},{"size":1418,"mtime":1645900668348,"results":"27","hashOfConfig":"24"},{"size":4273,"mtime":1645906683284,"results":"28","hashOfConfig":"24"},{"size":359,"mtime":1645805187363,"results":"29","hashOfConfig":"24"},{"size":1092,"mtime":1645836377587,"results":"30","hashOfConfig":"24"},{"size":859,"mtime":1645905313403,"results":"31","hashOfConfig":"24"},{"size":2117,"mtime":1645836388956,"results":"32","hashOfConfig":"24"},{"size":3238,"mtime":1645880606283,"results":"33","hashOfConfig":"24"},{"size":1352,"mtime":1645891763921,"results":"34","hashOfConfig":"24"},{"size":554,"mtime":1645876644758,"results":"35","hashOfConfig":"24"},{"size":1781,"mtime":1645906047225,"results":"36","hashOfConfig":"24"},{"size":615,"mtime":1645876364829,"results":"37","hashOfConfig":"24"},{"size":153,"mtime":1645835579933,"results":"38","hashOfConfig":"24"},{"size":726,"mtime":1645873863794,"results":"39","hashOfConfig":"24"},{"size":1459,"mtime":1645836439243,"results":"40","hashOfConfig":"24"},{"size":860,"mtime":1645873922186,"results":"41","hashOfConfig":"24"},{"size":298,"mtime":1645876166884,"results":"42","hashOfConfig":"24"},{"size":222,"mtime":1645879791884,"results":"43","hashOfConfig":"24"},{"size":1196,"mtime":1645900593707,"results":"44","hashOfConfig":"24"},{"size":897,"mtime":1645903392720,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1t21to1",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"59"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stan/Desktop/messenger/client/src/index.tsx",[],[],["119","120"],"/Users/stan/Desktop/messenger/client/src/contexts/UserProvider.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/MessagesList.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/ChatInput.tsx",[],[],["121","122"],"/Users/stan/Desktop/messenger/client/src/ChatApp.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/App.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/profilePicture/ProfilePicture.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/chat/chatHeader/ChatHeader.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/isMessageClose.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/ChatMessage.tsx",["123"],[],"import React, { useContext, useRef, useState } from \"react\";\nimport { Message } from \"../../../../types\";\nimport { UserContext } from \"../../../../contexts/UserProvider\";\nimport { hasCloseNeighbor } from \"../isMessageClose\";\nimport \"./chatMessage.css\";\nimport { scrollIntoView } from \"./scrollIntoView\";\nimport ProfilePicture from \"../../../profilePicture/ProfilePicture\";\nimport ChatDate from \"./chatTime/ChatDate\";\nimport { chatMessageDateFormat } from \"./chatMessageDateFormat\";\n\nconst ChatMessage = ({ messages, i }: { messages: Message[]; i: number }) => {\n  const { user } = useContext(UserContext);\n  const messageRef = useRef<HTMLDivElement>(null);\n  const isOwnMessage = user?._id === messages[i].userInfos._id;\n\n  const [mouseOverTimeOut, setMouseOverTimeOut] = useState<NodeJS.Timeout>();\n  const [isMouseHovering, setIsMouseHovering] = useState(false);\n\n  //HOVER MESSAGE\n  const handleMouseHoveringMessage = () => {\n    setMouseOverTimeOut(\n      setTimeout(() => {\n        setIsMouseHovering(true);\n      }, 500)\n    );\n  };\n  const handleMouseLeaving = () => {\n    if (mouseOverTimeOut) clearTimeout(mouseOverTimeOut);\n    setIsMouseHovering(false);\n  };\n\n  const hasNeighborBelow = hasCloseNeighbor({\n    order: \"next\",\n    messages,\n    i,\n  });\n  const hasNeighborAbove = hasCloseNeighbor({\n    order: \"prev\",\n    messages,\n    i,\n  });\n\n  const chatMessageClassName = () => {\n    if (isOwnMessage) {\n      if (hasNeighborBelow && hasNeighborAbove)\n        return \"chat-message own-up-down\";\n      else if (hasNeighborBelow && !hasNeighborAbove)\n        return \"chat-message own-down\";\n      else if (!hasNeighborBelow && hasNeighborAbove)\n        return \"chat-message own-up\";\n      else return \"chat-message own\";\n    } else {\n      if (hasNeighborBelow && hasNeighborAbove) return \"chat-message up-down\";\n      else if (hasNeighborBelow && !hasNeighborAbove)\n        return \"chat-message down\";\n      else if (!hasNeighborBelow && hasNeighborAbove) return \"chat-message up\";\n      else return \"chat-message\";\n    }\n  };\n\n  // useEffect(() => {\n  //   scrollIntoView(messageRef);\n  // }, [messageRef]);\n\n  return (\n    <div\n      className={\n        isOwnMessage ? \"chat-message-wrapper own\" : \"chat-message-wrapper\"\n      }\n    >\n      <ChatDate messages={messages} i={i} />\n      <div\n        className={\n          isOwnMessage ? \"chat-message-text-PP own\" : \"chat-message-text-PP\"\n        }\n      >\n        {!hasNeighborBelow && !isOwnMessage && (\n          <ProfilePicture\n            members={[messages[i].userInfos]}\n            size=\"small\"\n            absolute={true}\n          />\n        )}\n\n        <div\n          onMouseEnter={handleMouseHoveringMessage}\n          onMouseLeave={handleMouseLeaving}\n          ref={messageRef}\n          className={chatMessageClassName()}\n        >\n          {messages[i].content}\n\n          {isMouseHovering && (\n            <div\n              className={\n                isOwnMessage\n                  ? \"chat-message-date-small own\"\n                  : \"chat-message-date-small\"\n              }\n            >\n              {chatMessageDateFormat({ messages, i })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMessage;\n",["124","125"],"/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/sideBarHeader/SideBarHeader.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/sideBarHeader/sideBarSearchInput/SideBarSearchInput.tsx",["126"],[],"import React, { useState } from \"react\";\nimport \"./sideBarSearchInput.css\";\n\nconst SideBarSearchInput = ({\n  searchInput,\n  setSearchInput,\n}: {\n  searchInput: string;\n  setSearchInput: React.Dispatch<React.SetStateAction<string>>;\n}) => {\n  return (\n    <div className=\"side-bar-search-input-wrapper\">\n      <input\n        placeholder=\"Search a conversation...\"\n        className=\"side-bar-search-input\"\n        value={searchInput}\n        onChange={(e) => setSearchInput(e.target.value)}\n      />\n    </div>\n  );\n};\n\nexport default SideBarSearchInput;\n","/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/sideBarItem/SideBarChatItem.tsx",["127"],[],"import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Chat } from \"../../../types\";\nimport ProfilePicture from \"../../profilePicture/ProfilePicture\";\nimport \"./sideBarChatItem.css\";\nimport { format } from \"timeago.js\";\n\nconst SideBarConversationItem = ({ chat }: { chat: Chat }) => {\n  const currentChatParamsId = useParams().chatId;\n  const [isCurrentChat, setIsCurrentChat] = useState(\n    chat._id === currentChatParamsId\n  );\n  useEffect(() => {\n    setIsCurrentChat(chat._id === currentChatParamsId);\n  }, [currentChatParamsId]);\n\n  return (\n    <Link className=\"Link\" to={\"/\" + chat._id} style={{ position: \"relative\" }}>\n      <div\n        className={\n          isCurrentChat ? \"side-bar-chat-item current\" : \"side-bar-chat-item\"\n        }\n      >\n        <ProfilePicture\n          key={chat._id}\n          members={chat.membersInfos}\n          size=\"large\"\n        />\n        <div className=\"side-bar-chat-item-infos\">\n          <h1 className=\"side-bar-members-usernames\">\n            {chat.membersInfos.map((member) => {\n              return member.username;\n            })}\n          </h1>\n\n          {chat.lastMessage?.content && (\n            <p className=\"side-bar-chat-item-last-message\">\n              {chat.lastMessage.content.length > 20\n                ? chat.lastMessage.content.slice(0, 30) + \"...\"\n                : chat.lastMessage.content}\n              <span className=\"side-bar-chat-last-message-date\">\n                {\" \"}\n                • {chat.lastMessage && format(chat.lastMessage.createdAt)}\n              </span>\n            </p>\n          )}\n        </div>\n      </div>\n      <div className=\"side-bar-chat-item-divider \" />\n    </Link>\n  );\n};\n\nexport default SideBarConversationItem;\n","/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/ChatSideBar.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/scrollIntoView.tsx",["128"],[],"/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/chatTime/ChatDate.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/chatTime/hasAboveNeighbor.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/chat/messagesList/chatMessage/chatMessageDateFormat.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/contexts/ChatsProvider.tsx",[],[],"/Users/stan/Desktop/messenger/client/src/components/sideBarChatsList/sideBarHeader/chatSideBarSearchResults/ChatSideBarSearchResults.tsx",["129"],[],"/Users/stan/Desktop/messenger/client/src/components/chat/chatInput/sendMessage.tsx",["130","131"],[],"import axios from \"axios\";\nimport { Chat, User } from \"../../../types\";\n\nexport const sendMessage = async ({\n  messageInput,\n  setMessageInput,\n  chats,\n  user,\n  currentChatId,\n}: {\n  messageInput: string;\n  setMessageInput: React.Dispatch<React.SetStateAction<string>>;\n  chats: Chat[];\n  user: User | null;\n  currentChatId: string | undefined;\n}) => {\n  if (messageInput === \"\" || !user || !currentChatId) return;\n  const res = await axios.post(\n    `http://localhost:5050/api/messages/${currentChatId}`,\n    {\n      content: messageInput,\n      userId: user._id,\n      chatId: currentChatId,\n    }\n  );\n  const chatsCopy = [...chats];\n  const currentChat = chatsCopy.find((chat) => chat._id === currentChatId);\n  if (!currentChat) return;\n  const membersIds = currentChat.membersInfos.map((member) => member._id);\n  const receiversIds = membersIds.filter((id) => id !== user._id);\n  const { userId, ...others } = res.data;\n  const messageCopy = {\n    ...others,\n    userInfos: user,\n  };\n  //   emitNewMessageSocket(messageCopy, receiversIds);\n  //   updateCurrentChatLastMessage(messageCopy, currentChat, chatsCopy);\n  //   setMessages([messageCopy, ...messages]);\n  setMessageInput(\"\");\n};\n","/Users/stan/Desktop/messenger/client/src/sortChats.tsx",[],[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"132","replacedBy":"136"},{"ruleId":"134","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":6,"column":10,"nodeType":"140","messageId":"141","endLine":6,"endColumn":24},{"ruleId":"132","replacedBy":"142"},{"ruleId":"134","replacedBy":"143"},{"ruleId":"138","severity":1,"message":"144","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":25},{"ruleId":"145","severity":1,"message":"146","line":15,"column":6,"nodeType":"147","endLine":15,"endColumn":27,"suggestions":"148"},{"ruleId":"138","severity":1,"message":"149","line":1,"column":10,"nodeType":"140","messageId":"141","endLine":1,"endColumn":17},{"ruleId":"138","severity":1,"message":"150","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":27},{"ruleId":"138","severity":1,"message":"151","line":30,"column":9,"nodeType":"140","messageId":"141","endLine":30,"endColumn":21},{"ruleId":"138","severity":1,"message":"152","line":32,"column":9,"nodeType":"140","messageId":"141","endLine":32,"endColumn":20},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],["153"],["154"],"@typescript-eslint/no-unused-vars","'scrollIntoView' is defined but never used.","Identifier","unusedVar",["153"],["154"],"'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chat._id'. Either include it or remove the dependency array. If 'setIsCurrentChat' needs the current value of 'chat._id', you can also switch to useReducer instead of useState and read 'chat._id' in the reducer.","ArrayExpression",["155"],"'Message' is defined but never used.","'useContext' is defined but never used.","'receiversIds' is assigned a value but never used.","'messageCopy' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},"Update the dependencies array to be: [chat._id, currentChatParamsId]",{"range":"158","text":"159"},[570,591],"[chat._id, currentChatParamsId]"]